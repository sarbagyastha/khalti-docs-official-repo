{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This site hosts documentation for developers who are looking to integrate Khalti as a Payment Option in their online platform. If you fall into that category, please keep reading. Khalti is a payment gateway, digital wallet and API provider system for various online services for Nepal. With Khalti SDK/API, you can accepts payments from: Khalti users. eBanking users of our partner banks. Mobile banking users of our mobile banking partner banks. SCT/VISA card holders. connectIPS users. Using Khalti Payment Gateway, you do not need to integrate with individual banks. Features \u00b6 Multiple Payment Options for Customers Highly secure and Easy Integrations SDKs are available for Web (JavaScript), Android and iOS. Customers can make wallet payments without leaving your platform. Secured Transaction uses 2 step authentication i.e Khalti Pin and Khalti Password. Transaction Processing is disabled on multiple request for wrong Khalti Pin. Merchant Dashboard to view transactions, issue refunds, filter and download reports etc. Multi User System Realtime Balance updates in Merchant Dashboard on every successful payments made by customers Amount collected in Merchant Dashboard can we deposited/transferred to bank accounts anytime Support \u00b6 For Queries, feel free to call us at: Mobile (Viber / Whatsapp / Skype): 9801165565, 9801052293 Email: merchant@khalti.com Getting Started \u00b6","title":"Introduction"},{"location":"#introduction","text":"This site hosts documentation for developers who are looking to integrate Khalti as a Payment Option in their online platform. If you fall into that category, please keep reading. Khalti is a payment gateway, digital wallet and API provider system for various online services for Nepal. With Khalti SDK/API, you can accepts payments from: Khalti users. eBanking users of our partner banks. Mobile banking users of our mobile banking partner banks. SCT/VISA card holders. connectIPS users. Using Khalti Payment Gateway, you do not need to integrate with individual banks.","title":"Introduction"},{"location":"#features","text":"Multiple Payment Options for Customers Highly secure and Easy Integrations SDKs are available for Web (JavaScript), Android and iOS. Customers can make wallet payments without leaving your platform. Secured Transaction uses 2 step authentication i.e Khalti Pin and Khalti Password. Transaction Processing is disabled on multiple request for wrong Khalti Pin. Merchant Dashboard to view transactions, issue refunds, filter and download reports etc. Multi User System Realtime Balance updates in Merchant Dashboard on every successful payments made by customers Amount collected in Merchant Dashboard can we deposited/transferred to bank accounts anytime","title":"Features"},{"location":"#support","text":"For Queries, feel free to call us at: Mobile (Viber / Whatsapp / Skype): 9801165565, 9801052293 Email: merchant@khalti.com","title":"Support"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"contact-us/","text":"Contact Our Merchant Team Mobile (Viber / Whatsapp): 9801165567, 9801165538 Email: merchant@khalti.com (To integrate Khalti to your business and other online platforms.) Contact Our Merchant Support Mobile (Viber / Whatsapp): 9801165565, 9801856383, 9801856451 Email: merchantcare@khalti.com Contact Our Technical Team Mobile (Viber / Whatsapp): 9843007232 Email / Skype: sashant@khalti.com (For payment gateway integration support.)","title":"Contact Us"},{"location":"contribution/","text":"Introduction \u00b6 Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue. Key information \u00b6 The documentation source files are inside content/ directory. The source files are written in Markdown . The HTML documentation site is built using mkdocs , a Python package to build documentation. How to contribute \u00b6 Fork it, clone it \u00b6 Fork the docs repo by using the Github interface. Clone that fork into your development machine. git clone git@github.com:<YOUR_USERNAME>/khalti-docs-official-repo.git Locally building and serving \u00b6 Install mkdocs using any of the methods specified in the official documentation . The current theme used for mkdocs is material . You will need to install the theme as well. pip install mkdocs-material To serve the docs locally, run: mkdocs serve This will build and host the .md files in http://localhost:8000 . It will also live reload the page when you make changes in the source files. Pushing changes \u00b6 Once you've made necessary changes, push it to your forked repository by running: git push origin master After you've done this, you need to ask us to merge your changes to the main repo. Github provides pull request feature to accomplish that. Go to the pull requests tab of the main repo. You'll notice a big green, New pull request button on the top right side of the page. Click on that button and follow from there. Your pull request will be reviewed and merged by one of Khalti development staff.","title":"Contribution"},{"location":"contribution/#introduction","text":"Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue.","title":"Introduction"},{"location":"contribution/#key-information","text":"The documentation source files are inside content/ directory. The source files are written in Markdown . The HTML documentation site is built using mkdocs , a Python package to build documentation.","title":"Key information"},{"location":"contribution/#how-to-contribute","text":"","title":"How to contribute"},{"location":"contribution/#fork-it-clone-it","text":"Fork the docs repo by using the Github interface. Clone that fork into your development machine. git clone git@github.com:<YOUR_USERNAME>/khalti-docs-official-repo.git","title":"Fork it, clone it"},{"location":"contribution/#locally-building-and-serving","text":"Install mkdocs using any of the methods specified in the official documentation . The current theme used for mkdocs is material . You will need to install the theme as well. pip install mkdocs-material To serve the docs locally, run: mkdocs serve This will build and host the .md files in http://localhost:8000 . It will also live reload the page when you make changes in the source files.","title":"Locally building and serving"},{"location":"contribution/#pushing-changes","text":"Once you've made necessary changes, push it to your forked repository by running: git push origin master After you've done this, you need to ask us to merge your changes to the main repo. Github provides pull request feature to accomplish that. Go to the pull requests tab of the main repo. You'll notice a big green, New pull request button on the top right side of the page. Click on that button and follow from there. Your pull request will be reviewed and merged by one of Khalti development staff.","title":"Pushing changes"},{"location":"getting-started/","text":"There are four steps for integrating Khalti payment to a merchant system. 1. Signup as merchant 2. Understand how khalti payment works 3. Test integration 3.1. Client side integration 3.2. Server side integration 4. Deploy integration 1. Signup as merchant \u00b6 First of all you will need a merchant and a consumer accounts. Merchant is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer is an end user who uses Khalti to purchase products or services from merchants. Please follow links below to create a merchant and a consumer accounts if you have not already. Create a merchant account Create a consumer account 2. Understand Khalti payment process \u00b6 2.1. Transaction States \u00b6 1. Initiated \u00b6 It is the first state of a transaction. Transactions are initiated after mobile number and khalti pin along with other transaction details are provided. 2. Confirmed \u00b6 A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer. Check how to set and update khalti pin here. 3. Completed \u00b6 Merchant server then requests khalti server to verify the transaction. After the transaction is in completed state consumer is informed the transaction was successfully completed. 4. Disabled \u00b6 A transaction could be disabled due to the possibility of 'confirmation_code' exploitation. 5. Refunded \u00b6 A merchant can refund the successful payments within a limited period of time. 6. Partially refunded \u00b6 A completed transaction also can be partially refunded. 7. Failed \u00b6 Normally, a successful transaction has at least three changes of states initiate, confirm and complete. A client first initiates and then confirms payment while the server finally verifies it and the payment process is completed. 3. Test integration \u00b6 Now that you know how Khalti payment works. Its time to integrate it into your system. A merchant must complete test integration using test keys . Test keys start with test_ . In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant. Khalti must to be integrated at client and server. Payment via E-Banking and Debit/Credit card is not supported in the test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration. 3.1. Client side integration \u00b6 For now there is only one way to integrate Khalti at client side, through SDKs. We have developed SDKs for every major plaforms and we call it Checkout . Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment. Web kit Android kit iOS kit Flutter kit 3.2. Server side integration \u00b6 After user confirms payment, it has to be verified by Khalti. Fund from user account is moved to merchant only if verification succeeds. Verification must be done by the merchant server using a secret key. Verification API Transaction API 4. Go live \u00b6 After successful integration test, live keys will be generated in the merchant dashboard. The merchant must replace test keys with live ones . Live keys start with live_X . Replace test_public_X and test_secret_X keys with live_public_X and live_secret_X keys respectively. 4.1. Further processes \u00b6 Even successful integration itself doesn't let you receive payments above NRs. 1000 per transaction. Please fill KYC form and contact us at 9801165568 to remove the limits and accept payments without restrictions.","title":"Getting Started"},{"location":"getting-started/#1-signup-as-merchant","text":"First of all you will need a merchant and a consumer accounts. Merchant is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer is an end user who uses Khalti to purchase products or services from merchants. Please follow links below to create a merchant and a consumer accounts if you have not already. Create a merchant account Create a consumer account","title":"1. Signup as merchant"},{"location":"getting-started/#2-understand-khalti-payment-process","text":"","title":"2. Understand Khalti payment process"},{"location":"getting-started/#21-transaction-states","text":"","title":"2.1. Transaction States"},{"location":"getting-started/#1-initiated","text":"It is the first state of a transaction. Transactions are initiated after mobile number and khalti pin along with other transaction details are provided.","title":"1. Initiated"},{"location":"getting-started/#2-confirmed","text":"A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer. Check how to set and update khalti pin here.","title":"2. Confirmed"},{"location":"getting-started/#3-completed","text":"Merchant server then requests khalti server to verify the transaction. After the transaction is in completed state consumer is informed the transaction was successfully completed.","title":"3. Completed"},{"location":"getting-started/#4-disabled","text":"A transaction could be disabled due to the possibility of 'confirmation_code' exploitation.","title":"4. Disabled"},{"location":"getting-started/#5-refunded","text":"A merchant can refund the successful payments within a limited period of time.","title":"5. Refunded"},{"location":"getting-started/#6-partially-refunded","text":"A completed transaction also can be partially refunded.","title":"6. Partially refunded"},{"location":"getting-started/#7-failed","text":"Normally, a successful transaction has at least three changes of states initiate, confirm and complete. A client first initiates and then confirms payment while the server finally verifies it and the payment process is completed.","title":"7. Failed"},{"location":"getting-started/#3-test-integration","text":"Now that you know how Khalti payment works. Its time to integrate it into your system. A merchant must complete test integration using test keys . Test keys start with test_ . In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant. Khalti must to be integrated at client and server. Payment via E-Banking and Debit/Credit card is not supported in the test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration.","title":"3. Test integration"},{"location":"getting-started/#31-client-side-integration","text":"For now there is only one way to integrate Khalti at client side, through SDKs. We have developed SDKs for every major plaforms and we call it Checkout . Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment. Web kit Android kit iOS kit Flutter kit","title":"3.1. Client side integration"},{"location":"getting-started/#32-server-side-integration","text":"After user confirms payment, it has to be verified by Khalti. Fund from user account is moved to merchant only if verification succeeds. Verification must be done by the merchant server using a secret key. Verification API Transaction API","title":"3.2. Server side integration"},{"location":"getting-started/#4-go-live","text":"After successful integration test, live keys will be generated in the merchant dashboard. The merchant must replace test keys with live ones . Live keys start with live_X . Replace test_public_X and test_secret_X keys with live_public_X and live_secret_X keys respectively.","title":"4. Go live"},{"location":"getting-started/#41-further-processes","text":"Even successful integration itself doesn't let you receive payments above NRs. 1000 per transaction. Please fill KYC form and contact us at 9801165568 to remove the limits and accept payments without restrictions.","title":"4.1. Further processes"},{"location":"gotchas/","text":"FAQ's \u00b6 1. Does Khalti have SDK for hybrid Apps? We do have SDK for Flutter . But for hybrid apps based on other frameworks, we don't have a specific SDK. Find options in Client Integration , which support Khalti checkout integration with your app. 2. Can I share merchant keys? Secret key must not be shared with anyone. Ensure it does not get leaked by any means. If you key got compromised you can regenerate new one from your merchant dashboard. 3. Can I integrate Khalti in my static/HTML website? Complete Khalti integration in Static/HTML site is not possible. If the currently available options failed to meet your requirement leave us your feedback . 4. While installing the plugin I got an issue. How can I resolve it? First, check if cURL is enabled. You should check if you miss out any dependency or extension. There might be common SSL issues. You can also tweak the code (of the plugin you got from GitHub) on your own. For debugging paste this in your code to get the configuration and predefined variables. <?php phpinfo();?> Also, see your server log. 5. What is Khalti PIN? Khalti pin is the four digit pin, used by the user while making payment of third party transactions. It can created or changed at the Transaction Pin section under Account in khalti web and Settings in khalti app. 6. I need to refund payment to the user. How can I refund a transaction? You can refund the payment to the user from your dashboard. gotchas \u00b6 CORS issues If you are getting CORS issues, read the docs again very thoroughly. You need to call verification API from your server to verify, so it is necessary to pass the data to your server first. Server errors If you get error response \"Fee not found.\" while testing, check your fee and set fee between Rs. 10 to Rs. 1000. If you are using live keys contact merchant support to find your transaction limits. Payment errors If you get error response \"Amount must be less than 1000.\" while testing, check you have complete all the contract process. If you are using live keys contact merchant support for further details. Frame Options and Clickjacking protection Refused to display 'https://khalti.com/payment/widget/' in a frame because it set 'X-Frame-Options' to 'deny'. You are using HTTP response header 'X-Frame-Options' that avoids <iframe> rendering when you set it to 'deny'. But Khalti gateway uses iframe payment form, to accept payment from Khalti you need to allow iframe at least for khalti.com. You have a configuration option 'allow-from' with x-frame-options to allow from a specific domain. You can simply do this in your server configuration: X-Frame-Options \"allow-from https://khalti.com\" But using x-frame-options is not an internet standard. It is almost absolute; modern browsers like chrome and safari don't support it. The recommended way is to use 'frame-ancestors' CSP rule. (legacy browsers like IE do not support it ). So also for this error: Refused to display 'https://khalti.com/payment/widget/' in a frame because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'none'\". You need to configure the server as: Content-Security-Policy frame-ancestors 'self' khalti.com *.khalti.com One can use both the options for full browser compatibility. So, please change your server configuration accordingly.","title":"FAQ's and Gotchas"},{"location":"gotchas/#faqs","text":"1. Does Khalti have SDK for hybrid Apps? We do have SDK for Flutter . But for hybrid apps based on other frameworks, we don't have a specific SDK. Find options in Client Integration , which support Khalti checkout integration with your app. 2. Can I share merchant keys? Secret key must not be shared with anyone. Ensure it does not get leaked by any means. If you key got compromised you can regenerate new one from your merchant dashboard. 3. Can I integrate Khalti in my static/HTML website? Complete Khalti integration in Static/HTML site is not possible. If the currently available options failed to meet your requirement leave us your feedback . 4. While installing the plugin I got an issue. How can I resolve it? First, check if cURL is enabled. You should check if you miss out any dependency or extension. There might be common SSL issues. You can also tweak the code (of the plugin you got from GitHub) on your own. For debugging paste this in your code to get the configuration and predefined variables. <?php phpinfo();?> Also, see your server log. 5. What is Khalti PIN? Khalti pin is the four digit pin, used by the user while making payment of third party transactions. It can created or changed at the Transaction Pin section under Account in khalti web and Settings in khalti app. 6. I need to refund payment to the user. How can I refund a transaction? You can refund the payment to the user from your dashboard.","title":"FAQ's"},{"location":"gotchas/#gotchas","text":"CORS issues If you are getting CORS issues, read the docs again very thoroughly. You need to call verification API from your server to verify, so it is necessary to pass the data to your server first. Server errors If you get error response \"Fee not found.\" while testing, check your fee and set fee between Rs. 10 to Rs. 1000. If you are using live keys contact merchant support to find your transaction limits. Payment errors If you get error response \"Amount must be less than 1000.\" while testing, check you have complete all the contract process. If you are using live keys contact merchant support for further details. Frame Options and Clickjacking protection Refused to display 'https://khalti.com/payment/widget/' in a frame because it set 'X-Frame-Options' to 'deny'. You are using HTTP response header 'X-Frame-Options' that avoids <iframe> rendering when you set it to 'deny'. But Khalti gateway uses iframe payment form, to accept payment from Khalti you need to allow iframe at least for khalti.com. You have a configuration option 'allow-from' with x-frame-options to allow from a specific domain. You can simply do this in your server configuration: X-Frame-Options \"allow-from https://khalti.com\" But using x-frame-options is not an internet standard. It is almost absolute; modern browsers like chrome and safari don't support it. The recommended way is to use 'frame-ancestors' CSP rule. (legacy browsers like IE do not support it ). So also for this error: Refused to display 'https://khalti.com/payment/widget/' in a frame because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'none'\". You need to configure the server as: Content-Security-Policy frame-ancestors 'self' khalti.com *.khalti.com One can use both the options for full browser compatibility. So, please change your server configuration accordingly.","title":"gotchas"},{"location":"resources/","text":"Learn more about Khalti integration \u00b6 Here are few demo projects and resources in various plaforms. Official Resources \u00b6 Khalti Javascript SDK Khalti Android SDK Khalti iOS SDK Khalti Flutter SDK Khalti WooCommerce Plugin Khalti Opencart Plugin Khalti PrestaShop Plugin Khalti Mangeto 2 Plugin WHMCS Khalti Gateway Plugin Khalti Docs Repository Related Projects \u00b6 Ruby Wrapper of Khalti Payment API Vuejs component of Khalti SDK Example Projects \u00b6 Web Example, Client side with Vuejs, Server side with Flask(python) and Nodejs(express) Khalti Checkout Implementation with PHP Khalti checkout with angular5 iOS SDK Objective C Example iOS SDK Swift Example Android SDK Example Prestashop Docker Example Opencart Docker Example WooCommerce Docker Example yml Khalti integration for Laravel Khalti Flutter SDK Example (Default Payment Interface) Khalti Flutter SDK Example (Custom Payment Interface) If you want to list your resource please check contribution guide or contact khalti merchant support","title":"Resources"},{"location":"resources/#learn-more-about-khalti-integration","text":"Here are few demo projects and resources in various plaforms.","title":"Learn more about Khalti integration"},{"location":"resources/#official-resources","text":"Khalti Javascript SDK Khalti Android SDK Khalti iOS SDK Khalti Flutter SDK Khalti WooCommerce Plugin Khalti Opencart Plugin Khalti PrestaShop Plugin Khalti Mangeto 2 Plugin WHMCS Khalti Gateway Plugin Khalti Docs Repository","title":"Official Resources"},{"location":"resources/#related-projects","text":"Ruby Wrapper of Khalti Payment API Vuejs component of Khalti SDK","title":"Related Projects"},{"location":"resources/#example-projects","text":"Web Example, Client side with Vuejs, Server side with Flask(python) and Nodejs(express) Khalti Checkout Implementation with PHP Khalti checkout with angular5 iOS SDK Objective C Example iOS SDK Swift Example Android SDK Example Prestashop Docker Example Opencart Docker Example WooCommerce Docker Example yml Khalti integration for Laravel Khalti Flutter SDK Example (Default Payment Interface) Khalti Flutter SDK Example (Custom Payment Interface) If you want to list your resource please check contribution guide or contact khalti merchant support","title":"Example Projects"},{"location":"api/transaction/","text":"Transaction list \u00b6 Khalti provides API for retrieving list of payments made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment list respectively. List of transactions can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is paginated and in the following format: { \"total_pages\": 1, \"total_records\": 2, \"next\": null, \"previous\": null, \"record_range\": [ 1, 2 ], \"current_page\": 1, \"records\": [ { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } }, { \"idx\": \"eWAyLgv9N6FjGnwYqhLpXC\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"Dhvaj9hdRufLqkP8ZY4d8g\", \"name\": \"Confirmed\", \"template\": \"is confirm\" }, \"amount\": 10000, \"fee_amount\": 0, \"refunded\": false, \"created_on\": \"2018-07-06T16:54:33.361956+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } ] } API Request Examples \u00b6 CURL \u00b6 curl https://khalti.com/api/v2/merchant-transaction/ -H \"Authorization:Key <secret key> PHP \u00b6 $url = \"https://khalti.com/api/v2/merchant-transaction/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); Python \u00b6 import requests url = \"https://khalti.com/api/v2/merchant-transaction/\" payload = {} headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, payload, headers = headers) Ruby \u00b6 require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"List"},{"location":"api/transaction/#transaction-list","text":"Khalti provides API for retrieving list of payments made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment list respectively. List of transactions can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is paginated and in the following format: { \"total_pages\": 1, \"total_records\": 2, \"next\": null, \"previous\": null, \"record_range\": [ 1, 2 ], \"current_page\": 1, \"records\": [ { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } }, { \"idx\": \"eWAyLgv9N6FjGnwYqhLpXC\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"Dhvaj9hdRufLqkP8ZY4d8g\", \"name\": \"Confirmed\", \"template\": \"is confirm\" }, \"amount\": 10000, \"fee_amount\": 0, \"refunded\": false, \"created_on\": \"2018-07-06T16:54:33.361956+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } ] }","title":"Transaction list"},{"location":"api/transaction/#api-request-examples","text":"","title":"API Request Examples"},{"location":"api/transaction/#curl","text":"curl https://khalti.com/api/v2/merchant-transaction/ -H \"Authorization:Key <secret key>","title":"CURL"},{"location":"api/transaction/#php","text":"$url = \"https://khalti.com/api/v2/merchant-transaction/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);","title":"PHP"},{"location":"api/transaction/#python","text":"import requests url = \"https://khalti.com/api/v2/merchant-transaction/\" payload = {} headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, payload, headers = headers)","title":"Python"},{"location":"api/transaction/#ruby","text":"require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"Ruby"},{"location":"api/transaction_details/","text":"Transaction detail \u00b6 Khalti provides API for retrieving payment made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment respectively. Payment details can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is in the following format: { \"idx\": \"xeR2tuRqEvBLmeJcZzMb5U\", \"type\": { \"idx\": \"2jwzDS9wkxbkDFquJqfAEC\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 3000, \"fee_amount\": 90, \"created_on\": \"2018-04-16T17:04:05.204629+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"aVPXfJQ8HMYKhAePAU6pg5\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"refunded\": false, \"child_transactions\": [ { \"idx\": \"uUx2Ead8qqDuRufYh8vsYj\", \"type\": { \"idx\": \"YpwbDVqAnH42odGZmT5vZ8\", \"name\": \"Fee\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 90, \"fee_amount\": 0, \"created_on\": \"2018-07-19T12:31:55.620318+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"merchant\": { \"idx\": \"9dUzuqrLetWo9VY3fNwB2E\", \"name\": \"\", \"mobile\": \"wallet@khalti.com\" }, \"refunded\": false, \"child_transactions\": [], \"meta\": null } ], \"meta\": { \"product_identity\": \"369121518\", \"product_name\": \"Test Product\", \"product_url\": \"http://testproduct.com/wiki/khalti\" } } API Request Examples \u00b6 CURL \u00b6 curl https://khalti.com/api/v2/merchant-transaction/<idx>/ -H \"Authorization:Key <secret key> PHP \u00b6 $url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); Python \u00b6 import requests url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\" headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, headers = headers) Ruby \u00b6 require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/<idx>/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"Detail"},{"location":"api/transaction_details/#transaction-detail","text":"Khalti provides API for retrieving payment made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment respectively. Payment details can also be viewed after logging on Khalti website with merchant account. Replace <secret key> with test or live secret key as per required. Response is in the following format: { \"idx\": \"xeR2tuRqEvBLmeJcZzMb5U\", \"type\": { \"idx\": \"2jwzDS9wkxbkDFquJqfAEC\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 3000, \"fee_amount\": 90, \"created_on\": \"2018-04-16T17:04:05.204629+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"aVPXfJQ8HMYKhAePAU6pg5\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"refunded\": false, \"child_transactions\": [ { \"idx\": \"uUx2Ead8qqDuRufYh8vsYj\", \"type\": { \"idx\": \"YpwbDVqAnH42odGZmT5vZ8\", \"name\": \"Fee\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 90, \"fee_amount\": 0, \"created_on\": \"2018-07-19T12:31:55.620318+05:45\", \"can_refund\": true, \"can_complete\": false, \"ebanker\": null, \"user\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" }, \"merchant\": { \"idx\": \"9dUzuqrLetWo9VY3fNwB2E\", \"name\": \"\", \"mobile\": \"wallet@khalti.com\" }, \"refunded\": false, \"child_transactions\": [], \"meta\": null } ], \"meta\": { \"product_identity\": \"369121518\", \"product_name\": \"Test Product\", \"product_url\": \"http://testproduct.com/wiki/khalti\" } }","title":"Transaction detail"},{"location":"api/transaction_details/#api-request-examples","text":"","title":"API Request Examples"},{"location":"api/transaction_details/#curl","text":"curl https://khalti.com/api/v2/merchant-transaction/<idx>/ -H \"Authorization:Key <secret key>","title":"CURL"},{"location":"api/transaction_details/#php","text":"$url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);","title":"PHP"},{"location":"api/transaction_details/#python","text":"import requests url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\" headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, headers = headers)","title":"Python"},{"location":"api/transaction_details/#ruby","text":"require 'uri' require 'net/http' headers = { Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\" } uri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/<idx>/\") https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Get.new(uri.request_uri, headers) response = https.request(request) puts response.body","title":"Ruby"},{"location":"api/transaction_status/","text":"Transaction Status \u00b6 Khalti provides API for transaction status/lookup to check the state of the user's transaction made to the merchant. A merchant should use secret test and live keys to check test and live transaction status respectively. API \u00b6 The request signature for transaction lookup is as follows: URL : https://khalti.com/api/v2/payment/status/ Method : GET Headers: Authorization : test or live secret key in the form Key <secret key> Params: token : Token or idx given by Khalti after payment confirmation. amount : Amount (in paisa) with which payment was initiated. Responses \u00b6 Once you've made a request as specified above, Khalti server will return you a response of Transaction States in the following format. Success Response \u00b6 Success response consists of the Complete state. Completed State \u00b6 { \"status\": true, \"detail\": \"Transaction complete.\", \"state\": \"Complete\" } Error Response \u00b6 1. Trasaction Not Found \u00b6 An error occurs, if wrong token/idx or wrong amount is passed in the parameter. It consist of the detail of error. { \"status\": false, \"state\": \"Error\", \"detail\": \"Transaction not found\" } 2. Failed State \u00b6 A transaction could be failed due to the possibility of 'confirmation_code' exploitation. { \"status\": false, \"detail\": \"Transaction failed.\", \"state\": \"Failed\" } Other Responses \u00b6 1. Initiated State \u00b6 Transactions are initiated after mobile number and khalti pin along with other transaction details are provided. { \"status\": true, \"detail\": \"Transaciton initiated.\", \"state\": \"Initiated\" } 2. Confirmed State \u00b6 A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer. { \"status\": true, \"detail\": \"Transaciton not verified.\", \"state\": \"Confirmed\" } 3. Refunded State \u00b6 { \"status\": false, \"detail\": \"Transaciton refunded.\", \"state\": \"Refunded\" } 4. Partially Refunded State \u00b6 { \"status\": false, \"detail\": \"Transaction partially refunded.\", \"state\": \"Partially refunded\" } Example Requests \u00b6 Assuming the token/idx that we received is XPPrDcwtHUg4UQbWEnxRzA . Python \u00b6 import requests url = \"https://khalti.com/api/v2/payment/status/\" params = { \"token\": \"XPPrDcwtHUg4UQbWEnxRzA\", \"amount\": 1000 } headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, params, headers = headers) Node \u00b6 Install axios by running yarn install axios . const axios = require('axios'); let data = { \"token\": \"XPPrDcwtHUg4UQbWEnxRzA\", \"amount\": 1000 }; let config = { headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'} }; axios.get(\"https://khalti.com/api/v2/payment/status/\", data, config) .then(response => { console.log(response.data); }) .catch(error => { console.log(error); });","title":"Status"},{"location":"api/transaction_status/#transaction-status","text":"Khalti provides API for transaction status/lookup to check the state of the user's transaction made to the merchant. A merchant should use secret test and live keys to check test and live transaction status respectively.","title":"Transaction Status"},{"location":"api/transaction_status/#api","text":"The request signature for transaction lookup is as follows: URL : https://khalti.com/api/v2/payment/status/ Method : GET Headers: Authorization : test or live secret key in the form Key <secret key> Params: token : Token or idx given by Khalti after payment confirmation. amount : Amount (in paisa) with which payment was initiated.","title":"API"},{"location":"api/transaction_status/#responses","text":"Once you've made a request as specified above, Khalti server will return you a response of Transaction States in the following format.","title":"Responses"},{"location":"api/transaction_status/#success-response","text":"Success response consists of the Complete state.","title":"Success Response"},{"location":"api/transaction_status/#completed-state","text":"{ \"status\": true, \"detail\": \"Transaction complete.\", \"state\": \"Complete\" }","title":"Completed State"},{"location":"api/transaction_status/#error-response","text":"","title":"Error Response"},{"location":"api/transaction_status/#1-trasaction-not-found","text":"An error occurs, if wrong token/idx or wrong amount is passed in the parameter. It consist of the detail of error. { \"status\": false, \"state\": \"Error\", \"detail\": \"Transaction not found\" }","title":"1. Trasaction Not Found"},{"location":"api/transaction_status/#2-failed-state","text":"A transaction could be failed due to the possibility of 'confirmation_code' exploitation. { \"status\": false, \"detail\": \"Transaction failed.\", \"state\": \"Failed\" }","title":"2. Failed State"},{"location":"api/transaction_status/#other-responses","text":"","title":"Other Responses"},{"location":"api/transaction_status/#1-initiated-state","text":"Transactions are initiated after mobile number and khalti pin along with other transaction details are provided. { \"status\": true, \"detail\": \"Transaciton initiated.\", \"state\": \"Initiated\" }","title":"1. Initiated State"},{"location":"api/transaction_status/#2-confirmed-state","text":"A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer. { \"status\": true, \"detail\": \"Transaciton not verified.\", \"state\": \"Confirmed\" }","title":"2. Confirmed State"},{"location":"api/transaction_status/#3-refunded-state","text":"{ \"status\": false, \"detail\": \"Transaciton refunded.\", \"state\": \"Refunded\" }","title":"3. Refunded State"},{"location":"api/transaction_status/#4-partially-refunded-state","text":"{ \"status\": false, \"detail\": \"Transaction partially refunded.\", \"state\": \"Partially refunded\" }","title":"4. Partially Refunded State"},{"location":"api/transaction_status/#example-requests","text":"Assuming the token/idx that we received is XPPrDcwtHUg4UQbWEnxRzA .","title":"Example Requests"},{"location":"api/transaction_status/#python","text":"import requests url = \"https://khalti.com/api/v2/payment/status/\" params = { \"token\": \"XPPrDcwtHUg4UQbWEnxRzA\", \"amount\": 1000 } headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.get(url, params, headers = headers)","title":"Python"},{"location":"api/transaction_status/#node","text":"Install axios by running yarn install axios . const axios = require('axios'); let data = { \"token\": \"XPPrDcwtHUg4UQbWEnxRzA\", \"amount\": 1000 }; let config = { headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'} }; axios.get(\"https://khalti.com/api/v2/payment/status/\", data, config) .then(response => { console.log(response.data); }) .catch(error => { console.log(error); });","title":"Node"},{"location":"api/verification/","text":"Introduction \u00b6 Whenever your customer pays using the Khalti widget, the client side makes a request to the Khalti server to initiate and confirm the payment. Once they've confirmed the payment, the client will receive a response containing unique token and amount for that particular transaction. Upon receiving the transaction token, the client will make a request to your server with the token and the payment amount. On the next step, you will need to ask the Khalti server to verify the information relayed by the user before completing their purchase order. Why is server-to-server verification necessary? \u00b6 Since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server. Verification request \u00b6 Your application server must do a POST request to Khalti server for the final step of the payment process. The structure of the request as expected by Khalti server is as follows. url : https://khalti.com/api/v2/payment/verify/ method : POST headers : Authorization : test or live secret key in the form Key <secret key> payload : token : Token given by Khalti after payment confirmation. amount : Amount (in paisa) with which payment was initiated. (Important !! Cross check the amount from client side to amount from server.) Verification response \u00b6 Once you've made a request as specified above, Khalti server will return you a response in the following format. Success : Success response consists of the transaction record. { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } Error : Error response consists of the detail of errors. {'token': ['Invalid token.']} Examples \u00b6 Assuming the token that we received is QUao9cqFzxPgvWJNi9aKac . CURL \u00b6 curl https://khalti.com/api/v2/payment/verify/ \\ -H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\ -d amount=1000 \\ -d token=QUao9cqFzxPgvWJNi9aKac PHP \u00b6 $args = http_build_query(array( 'token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000 )); $url = \"https://khalti.com/api/v2/payment/verify/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$args); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); Python \u00b6 import requests url = \"https://khalti.com/api/v2/payment/verify/\" payload = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 } headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.post(url, payload, headers = headers) Ruby \u00b6 require 'uri' require 'net/http' headers = { Authorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b' } uri = URI.parse('https://khalti.com/api/v2/payment/verify/') https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Post.new(uri.request_uri, headers) request.set_form_data('token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000) response = https.request(request) puts response.body Node \u00b6 Install axios by running yarn install axios . const axios = require('axios'); let data = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 }; let config = { headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'} }; axios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config) .then(response => { console.log(response.data); }) .catch(error => { console.log(error); });","title":"Verification"},{"location":"api/verification/#introduction","text":"Whenever your customer pays using the Khalti widget, the client side makes a request to the Khalti server to initiate and confirm the payment. Once they've confirmed the payment, the client will receive a response containing unique token and amount for that particular transaction. Upon receiving the transaction token, the client will make a request to your server with the token and the payment amount. On the next step, you will need to ask the Khalti server to verify the information relayed by the user before completing their purchase order.","title":"Introduction"},{"location":"api/verification/#why-is-server-to-server-verification-necessary","text":"Since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server.","title":"Why is server-to-server verification necessary?"},{"location":"api/verification/#verification-request","text":"Your application server must do a POST request to Khalti server for the final step of the payment process. The structure of the request as expected by Khalti server is as follows. url : https://khalti.com/api/v2/payment/verify/ method : POST headers : Authorization : test or live secret key in the form Key <secret key> payload : token : Token given by Khalti after payment confirmation. amount : Amount (in paisa) with which payment was initiated. (Important !! Cross check the amount from client side to amount from server.)","title":"Verification request"},{"location":"api/verification/#verification-response","text":"Once you've made a request as specified above, Khalti server will return you a response in the following format. Success : Success response consists of the transaction record. { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"type\": { \"idx\": \"e476BL6jt9kgagEmsakyTL\", \"name\": \"Wallet payment\" }, \"state\": { \"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\", \"name\": \"Completed\", \"template\": \"is complete\" }, \"amount\": 1000, \"fee_amount\": 30, \"refunded\": false, \"created_on\": \"2018-06-20T14:48:08.867125+05:45\", \"ebanker\": null, \"user\": { \"idx\": \"cCaPkRPQGn5D8StkiqqMJg\", \"name\": \"Test User\", \"mobile\": \"98XXXXXXX9\" }, \"merchant\": { \"idx\": \"UM75Gm2gWmZvA4TPwkwZye\", \"name\": \"Test Merchant\", \"mobile\": \"testmerchant@khalti.com\" } } Error : Error response consists of the detail of errors. {'token': ['Invalid token.']}","title":"Verification response"},{"location":"api/verification/#examples","text":"Assuming the token that we received is QUao9cqFzxPgvWJNi9aKac .","title":"Examples"},{"location":"api/verification/#curl","text":"curl https://khalti.com/api/v2/payment/verify/ \\ -H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\ -d amount=1000 \\ -d token=QUao9cqFzxPgvWJNi9aKac","title":"CURL"},{"location":"api/verification/#php","text":"$args = http_build_query(array( 'token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000 )); $url = \"https://khalti.com/api/v2/payment/verify/\"; # Make the call using API. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS,$args); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b']; curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); // Response $response = curl_exec($ch); $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);","title":"PHP"},{"location":"api/verification/#python","text":"import requests url = \"https://khalti.com/api/v2/payment/verify/\" payload = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 } headers = { \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" } response = requests.post(url, payload, headers = headers)","title":"Python"},{"location":"api/verification/#ruby","text":"require 'uri' require 'net/http' headers = { Authorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b' } uri = URI.parse('https://khalti.com/api/v2/payment/verify/') https = Net::HTTP.new(uri.host, uri.port) https.use_ssl = true request = Net::HTTP::Post.new(uri.request_uri, headers) request.set_form_data('token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000) response = https.request(request) puts response.body","title":"Ruby"},{"location":"api/verification/#node","text":"Install axios by running yarn install axios . const axios = require('axios'); let data = { \"token\": \"QUao9cqFzxPgvWJNi9aKac\", \"amount\": 1000 }; let config = { headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'} }; axios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config) .then(response => { console.log(response.data); }) .catch(error => { console.log(error); });","title":"Node"},{"location":"checkout/","text":"this is index yo \u00b6","title":"this is index yo"},{"location":"checkout/#this-is-index-yo","text":"","title":"this is index yo"},{"location":"checkout/android/","text":"Khalti Android SDK \u00b6 Welcome to Khalti's checkout documentation Installation \u00b6 Requirements \u00b6 Android 5.0 and above AndroidX (as of v2.00.00) Android Studio 3 and above Quick Note \u00b6 We've dropped support of Android 4 since version 2.01.00 Configuration \u00b6 Add khalti-android to your build.gradle dependencies implementation ('com.khalti:khalti-android:$latest_version') { transitive = true } Also add the following lines inside the android block of your build.gradle file compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Disable R8 by adding the following lines inside your gradle.properties android.enableR8 = false Setup \u00b6 Add KhaltiButton in your xml layout as follows <com.khalti.widget.KhaltiButton android:id=\"@+id/khalti_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" app:khalti_button_style=\"khalti\"/> Add the following line in your root layout in your xml file if you're going to use khalti attribute. xmlns:app=\"http://schemas.android.com/apk/res-auto\" Then, Locate your xml Khalti Button in your Java KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button); XML Attribute \u00b6 Attribute Description app:text Text to display app:khalti_button_style Set the style of KhaltiButton from the available options Use the khalti_button_style attribute in your xml file to select a button style for your Khalti button. Or you can use the setButtonStyle() function in khalti button to set the style programmatically. Available button styles \u00b6 Button style Image basic khalti e_banking m_banking sct connect_ips Alternatively you can also inflate KhaltiButton in your java class as follows KhaltiButton khaltiButton = new KhaltiButton(); In order for Khalti button to be functional you'll need to pass an instance of Config . Building Config \u00b6 Create an instance of Builder class. Pass public key , product id , product name , amount (in paisa) and an implementation of OnCheckOutListener to the builder constructor. Map<String, Object> map = new HashMap<>(); map.put(\"merchant_extra\", \"This is extra data\"); Builder builder = new Config.Builder(Constant.pub, \"Product ID\", \"Main\", 1100L, new OnCheckOutListener() { @Override public void onError(@NonNull String action, @NonNull Map<String, String> errorMap) { Log.i(action, errorMap.toString()); } @Override public void onSuccess(@NonNull Map<String, Object> data) { Log.i(\"success\", data.toString()); } }) .paymentPreferences(new ArrayList<PaymentPreference>() {{ add(PaymentPreference.KHALTI); add(PaymentPreference.EBANKING); add(PaymentPreference.MOBILE_BANKING); add(PaymentPreference.CONNECT_IPS); add(PaymentPreference.SCT); }}) .additionalData(map) .productUrl(\"http://example.com/product\") .mobile(\"9800000000\"); Here, the functions paymentPreferences() , additionalData() , productUrl() and mobile() are optional and are not required to build the config. When passing additionalData through additionalData() functions make sure you add a merchant_ prefix in your map key. Finally, call the build() function in builder to build the config. Config config = builder.build(); Available Config Builder Methods \u00b6 Constraint Method Description Optional paymentPreference() Set which payment option tabs are to be shown Optional additionalData() Set additional data Optional productUrl() Add url of product Optional mobile() Preset mobile number in mobile field Required build() Build config Available payment preferences \u00b6 Preferences Description PaymentPreference.KHALTI Show Khalti payment tab PaymentPreference.EBANKING Show E-banking payment tab PaymentPreference.MOBILE_BANKING Show Mobile banking payment tab PaymentPreference.CONNECT_IPS Show Connect IPS payment tab PaymentPreference.SCT Show SCT card payment tab Set Config \u00b6 Set your config in your KhaltiButton. khaltiButton.setCheckOutConfig(config); Public Methods in KhaltiButton \u00b6 Constraint Method Description Required setCheckOutConfig(Config config) Set configuration required by Khalti checkout Optional setText(String text) Set text to display in KhaltiButton Optional setCustomView(View view) Replace KhaltiButton's default view with your custom view Optional setButtonStyle(ButtonStyle buttonStyle) Select between the available options to set KhaltiButton's style Callback Methods \u00b6 Method Description onSuccess(Map data) This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed to the Config through the Config bulder is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onError(String action, Map errorMap) This method is called when an error occurs during payment initiation or confirmation. Action and errorMap value is passed where action defines the current action being performed and errorMap has the necessary information on the error. onCancel() This method is called when the user dismisses or cancels the checkout process. (When the user presses back button). Response Sample \u00b6 Success Message \u00b6 Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url(if passed) Product Url String amount 100 Long token token String idx Unique identifier String The success message also contains all the key and value provided as extra data while building the Config . Error Message \u00b6 Variable Description Type action Action performed - (initiate, confirm) String errorMap Detail Error map Map More Implementations \u00b6 Method 1: With Custom Click Listener \u00b6 Initialize the KhaltiCheckout Object KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config); Use khaltiCheckout.show() to display Khalti widget khaltiButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { khaltiCheckOut.show(); } }); Method 2: With Custom View \u00b6 Get your custom view View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false); Set custom view to your khalti button khaltiButton.setCustomView(view); khaltiButton.setCheckOutConfig(config); Check out the source for Khalti checkout on Github . Check out the Verification process. Changelog \u00b6 Screenshots \u00b6","title":"Android SDK"},{"location":"checkout/android/#khalti-android-sdk","text":"Welcome to Khalti's checkout documentation","title":"Khalti Android SDK"},{"location":"checkout/android/#installation","text":"","title":"Installation"},{"location":"checkout/android/#requirements","text":"Android 5.0 and above AndroidX (as of v2.00.00) Android Studio 3 and above","title":"Requirements"},{"location":"checkout/android/#quick-note","text":"We've dropped support of Android 4 since version 2.01.00","title":"Quick Note"},{"location":"checkout/android/#configuration","text":"Add khalti-android to your build.gradle dependencies implementation ('com.khalti:khalti-android:$latest_version') { transitive = true } Also add the following lines inside the android block of your build.gradle file compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Disable R8 by adding the following lines inside your gradle.properties android.enableR8 = false","title":"Configuration"},{"location":"checkout/android/#setup","text":"Add KhaltiButton in your xml layout as follows <com.khalti.widget.KhaltiButton android:id=\"@+id/khalti_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" app:khalti_button_style=\"khalti\"/> Add the following line in your root layout in your xml file if you're going to use khalti attribute. xmlns:app=\"http://schemas.android.com/apk/res-auto\" Then, Locate your xml Khalti Button in your Java KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button);","title":"Setup"},{"location":"checkout/android/#xml-attribute","text":"Attribute Description app:text Text to display app:khalti_button_style Set the style of KhaltiButton from the available options Use the khalti_button_style attribute in your xml file to select a button style for your Khalti button. Or you can use the setButtonStyle() function in khalti button to set the style programmatically.","title":"XML Attribute"},{"location":"checkout/android/#available-button-styles","text":"Button style Image basic khalti e_banking m_banking sct connect_ips Alternatively you can also inflate KhaltiButton in your java class as follows KhaltiButton khaltiButton = new KhaltiButton(); In order for Khalti button to be functional you'll need to pass an instance of Config .","title":"Available button styles"},{"location":"checkout/android/#building-config","text":"Create an instance of Builder class. Pass public key , product id , product name , amount (in paisa) and an implementation of OnCheckOutListener to the builder constructor. Map<String, Object> map = new HashMap<>(); map.put(\"merchant_extra\", \"This is extra data\"); Builder builder = new Config.Builder(Constant.pub, \"Product ID\", \"Main\", 1100L, new OnCheckOutListener() { @Override public void onError(@NonNull String action, @NonNull Map<String, String> errorMap) { Log.i(action, errorMap.toString()); } @Override public void onSuccess(@NonNull Map<String, Object> data) { Log.i(\"success\", data.toString()); } }) .paymentPreferences(new ArrayList<PaymentPreference>() {{ add(PaymentPreference.KHALTI); add(PaymentPreference.EBANKING); add(PaymentPreference.MOBILE_BANKING); add(PaymentPreference.CONNECT_IPS); add(PaymentPreference.SCT); }}) .additionalData(map) .productUrl(\"http://example.com/product\") .mobile(\"9800000000\"); Here, the functions paymentPreferences() , additionalData() , productUrl() and mobile() are optional and are not required to build the config. When passing additionalData through additionalData() functions make sure you add a merchant_ prefix in your map key. Finally, call the build() function in builder to build the config. Config config = builder.build();","title":"Building Config"},{"location":"checkout/android/#available-config-builder-methods","text":"Constraint Method Description Optional paymentPreference() Set which payment option tabs are to be shown Optional additionalData() Set additional data Optional productUrl() Add url of product Optional mobile() Preset mobile number in mobile field Required build() Build config","title":"Available Config Builder Methods"},{"location":"checkout/android/#available-payment-preferences","text":"Preferences Description PaymentPreference.KHALTI Show Khalti payment tab PaymentPreference.EBANKING Show E-banking payment tab PaymentPreference.MOBILE_BANKING Show Mobile banking payment tab PaymentPreference.CONNECT_IPS Show Connect IPS payment tab PaymentPreference.SCT Show SCT card payment tab","title":"Available payment preferences"},{"location":"checkout/android/#set-config","text":"Set your config in your KhaltiButton. khaltiButton.setCheckOutConfig(config);","title":"Set Config"},{"location":"checkout/android/#public-methods-in-khaltibutton","text":"Constraint Method Description Required setCheckOutConfig(Config config) Set configuration required by Khalti checkout Optional setText(String text) Set text to display in KhaltiButton Optional setCustomView(View view) Replace KhaltiButton's default view with your custom view Optional setButtonStyle(ButtonStyle buttonStyle) Select between the available options to set KhaltiButton's style","title":"Public Methods in KhaltiButton"},{"location":"checkout/android/#callback-methods","text":"Method Description onSuccess(Map data) This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed to the Config through the Config bulder is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onError(String action, Map errorMap) This method is called when an error occurs during payment initiation or confirmation. Action and errorMap value is passed where action defines the current action being performed and errorMap has the necessary information on the error. onCancel() This method is called when the user dismisses or cancels the checkout process. (When the user presses back button).","title":"Callback Methods"},{"location":"checkout/android/#response-sample","text":"","title":"Response Sample"},{"location":"checkout/android/#success-message","text":"Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url(if passed) Product Url String amount 100 Long token token String idx Unique identifier String The success message also contains all the key and value provided as extra data while building the Config .","title":"Success Message"},{"location":"checkout/android/#error-message","text":"Variable Description Type action Action performed - (initiate, confirm) String errorMap Detail Error map Map","title":"Error Message"},{"location":"checkout/android/#more-implementations","text":"","title":"More Implementations"},{"location":"checkout/android/#method-1-with-custom-click-listener","text":"Initialize the KhaltiCheckout Object KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config); Use khaltiCheckout.show() to display Khalti widget khaltiButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { khaltiCheckOut.show(); } });","title":"Method 1: With Custom Click Listener"},{"location":"checkout/android/#method-2-with-custom-view","text":"Get your custom view View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false); Set custom view to your khalti button khaltiButton.setCustomView(view); khaltiButton.setCheckOutConfig(config); Check out the source for Khalti checkout on Github . Check out the Verification process.","title":"Method 2: With Custom View"},{"location":"checkout/android/#changelog","text":"","title":"Changelog"},{"location":"checkout/android/#screenshots","text":"","title":"Screenshots"},{"location":"checkout/diy-ebanking/","text":"Introduction \u00b6 This document explains the various requests to implement ebanking payment system using Khalti. First and foremost, please read the docs at http://docs.khalti.com to understand the basic workflow of the merchant API. API \u00b6 1. Get Bank List \u00b6 This API provides the bank list. The request signature for initiation is as follows: URL: https://khalti.com/api/bank/?has_ebanking=true Method: GET The response contains list of banks with the details as shown below. { ... \"records\": [ { \"idx\": \"Yy6jFwuwssihs77PHGjwAZ\", \"name\": \"<Bank Name>\", \"short_name\": \"<Truncated Name>\", \"logo\": \"<logo source>\", \"has_cardpayment\": false, \"address\": \"<Bank address>\", \"has_ebanking\": true, \"has_direct_withdraw\": false, \"has_nchl\": false, \"has_mobile_banking\": false, \"play_store\": \"\", \"app_store\": \"\" } ] } 2. Initiate transaction \u00b6 As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/ebanking/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. amount : Required. The amount value of payment. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product.false bank :Required.A bank idx, source :Required. web, android, ios, or custom, return_url :Optional. It is required if source key is custom or ios . return_url for ios platform creates a url scheme for browser to open current app and if for custom redirects window to this url with data, Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\", \"bank\": \"Yy6jFwuwssihs77PHGjwAZ\", \"source\": \"web\" } With this request khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response. Data Retrival \u00b6 Once transaction is initated, user interacts with ebanking system. After transaction is completed getting success or failure response is tricky. There are different ways based on different source . Android For android it returns data with the intent intent://ebanking/#Intent;scheme=khalti;package=<return_url>;S.data=<data>;S.browser_fallback_url=https://khalti.com/;end IOS For ios you need to provide return_url and response data is binded with it. Finally, custom url for the action is <return_url>://?<data> Custom If you have provided return url and source as custom as following: { ... \"return_url\": \"http://example.bookshop.com/\", \"source\": \"custom\" } You will then get redirection to return_url with data as below. <return_url>/?<data> Web And with web response data is stored in local storage with localstorage.setItem(\"confirmation-data\", {{data}}) The storage event is fired when a storage area (localStorage or sessionStorage) has been modified. So, while implementing it needs to listen the storage event and read localstorage value as data with the key confirmation-data . The example is like this: window.addEventListener(\"storage\", function (event) { if (event.key == \"confirmation-data\") { data = JSON.parse(event.newValue); // this is the final response with looks json shown below window.localStorage.removeItem(\"confirmation-data\"); } }); Finally, a successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" } 3. Verify transaction \u00b6 The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction. Notes \u00b6 While testing you might need to interact with actual system of banks. There is no sandbox or testing environment for using ebanking system. Prevent parent page (that initiates redirection) for closing until payment process is not completed. You will not get final response unless bank portal provides success/response message.","title":"Ebanking"},{"location":"checkout/diy-ebanking/#introduction","text":"This document explains the various requests to implement ebanking payment system using Khalti. First and foremost, please read the docs at http://docs.khalti.com to understand the basic workflow of the merchant API.","title":"Introduction"},{"location":"checkout/diy-ebanking/#api","text":"","title":"API"},{"location":"checkout/diy-ebanking/#1-get-bank-list","text":"This API provides the bank list. The request signature for initiation is as follows: URL: https://khalti.com/api/bank/?has_ebanking=true Method: GET The response contains list of banks with the details as shown below. { ... \"records\": [ { \"idx\": \"Yy6jFwuwssihs77PHGjwAZ\", \"name\": \"<Bank Name>\", \"short_name\": \"<Truncated Name>\", \"logo\": \"<logo source>\", \"has_cardpayment\": false, \"address\": \"<Bank address>\", \"has_ebanking\": true, \"has_direct_withdraw\": false, \"has_nchl\": false, \"has_mobile_banking\": false, \"play_store\": \"\", \"app_store\": \"\" } ] }","title":"1. Get Bank List"},{"location":"checkout/diy-ebanking/#2-initiate-transaction","text":"As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/ebanking/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. amount : Required. The amount value of payment. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product.false bank :Required.A bank idx, source :Required. web, android, ios, or custom, return_url :Optional. It is required if source key is custom or ios . return_url for ios platform creates a url scheme for browser to open current app and if for custom redirects window to this url with data, Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\", \"bank\": \"Yy6jFwuwssihs77PHGjwAZ\", \"source\": \"web\" } With this request khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response.","title":"2. Initiate transaction"},{"location":"checkout/diy-ebanking/#data-retrival","text":"Once transaction is initated, user interacts with ebanking system. After transaction is completed getting success or failure response is tricky. There are different ways based on different source . Android For android it returns data with the intent intent://ebanking/#Intent;scheme=khalti;package=<return_url>;S.data=<data>;S.browser_fallback_url=https://khalti.com/;end IOS For ios you need to provide return_url and response data is binded with it. Finally, custom url for the action is <return_url>://?<data> Custom If you have provided return url and source as custom as following: { ... \"return_url\": \"http://example.bookshop.com/\", \"source\": \"custom\" } You will then get redirection to return_url with data as below. <return_url>/?<data> Web And with web response data is stored in local storage with localstorage.setItem(\"confirmation-data\", {{data}}) The storage event is fired when a storage area (localStorage or sessionStorage) has been modified. So, while implementing it needs to listen the storage event and read localstorage value as data with the key confirmation-data . The example is like this: window.addEventListener(\"storage\", function (event) { if (event.key == \"confirmation-data\") { data = JSON.parse(event.newValue); // this is the final response with looks json shown below window.localStorage.removeItem(\"confirmation-data\"); } }); Finally, a successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" }","title":"Data Retrival"},{"location":"checkout/diy-ebanking/#3-verify-transaction","text":"The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction.","title":"3. Verify transaction"},{"location":"checkout/diy-ebanking/#notes","text":"While testing you might need to interact with actual system of banks. There is no sandbox or testing environment for using ebanking system. Prevent parent page (that initiates redirection) for closing until payment process is not completed. You will not get final response unless bank portal provides success/response message.","title":"Notes"},{"location":"checkout/diy-wallet/","text":"Introduction \u00b6 Read this documentation only if you plan to implement your own SDK instead of using the ones provided by Khalti. If you are not sure about that, please check our SDK for Android, iOS and Web platforms. Before starting out, read the rest of the documentation at http://docs.khalti.com to understand the basic workflow of the merchant API. API \u00b6 1. Initiate transaction \u00b6 As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/api/v2/payment/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. transaction_pin : Required. Third party khalti pin submitted by the user. amount : Required. The amount value of payment. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product. product_url : Optional. Url of the product. Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"transaction_pin\": \"1234\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\", \"product_url\": \"http://bookexample.com\" } The response will be something like this: { \"token\": \"BVNKCiLZhZipkMGws5hgS8\", } 2. Confirm transaction \u00b6 In this step, you will need to prompt the user for the OTP (One Time Password), and their 3rd party khalti pin. Once those details are submitted, the request to verify transaction should be made like this: The value in token key from the response in previous step is required to verify the transaction. Request signature: URL: https://khalti.com/api/v2/payment/confirm/ Method: POST Data: public_key : Required. Should be same as the key used for transaction initiation. token : Required. Transaction initiation token. confirmation_code : Required. OTP submitted by the user. transaction_pin : Required. Third party khalti pin submitted by the user. A sample request adhering to above signature will look like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"confirmation_code\": \"206964\", \"transaction_pin\": \"1234\" } A successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" } 3. Verify transaction \u00b6 The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction. Notes \u00b6 Initiate and confirm api requests should be made from the front-end.","title":"Wallet"},{"location":"checkout/diy-wallet/#introduction","text":"Read this documentation only if you plan to implement your own SDK instead of using the ones provided by Khalti. If you are not sure about that, please check our SDK for Android, iOS and Web platforms. Before starting out, read the rest of the documentation at http://docs.khalti.com to understand the basic workflow of the merchant API.","title":"Introduction"},{"location":"checkout/diy-wallet/#api","text":"","title":"API"},{"location":"checkout/diy-wallet/#1-initiate-transaction","text":"As the title says, this API is called to initiates the transaction. E.g. When the user clicks Checkout button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits. The request signature for initiation is as follows: URL: https://khalti.com/api/v2/payment/initiate/ Method: POST Data: public_key : Required. Either test or live public key. mobile : Required. The Khalti registered mobile number of payer. transaction_pin : Required. Third party khalti pin submitted by the user. amount : Required. The amount value of payment. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. product_identity : Required. A string to identify the product. product_name : Required. Descriptive name for the product. product_url : Optional. Url of the product. Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with merchant_ . A sample request adhering to the above signature will look something like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"mobile\": \"9842XXXXXX\", \"transaction_pin\": \"1234\", \"amount\": 10000, \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\", \"product_url\": \"http://bookexample.com\" } The response will be something like this: { \"token\": \"BVNKCiLZhZipkMGws5hgS8\", }","title":"1. Initiate transaction"},{"location":"checkout/diy-wallet/#2-confirm-transaction","text":"In this step, you will need to prompt the user for the OTP (One Time Password), and their 3rd party khalti pin. Once those details are submitted, the request to verify transaction should be made like this: The value in token key from the response in previous step is required to verify the transaction. Request signature: URL: https://khalti.com/api/v2/payment/confirm/ Method: POST Data: public_key : Required. Should be same as the key used for transaction initiation. token : Required. Transaction initiation token. confirmation_code : Required. OTP submitted by the user. transaction_pin : Required. Third party khalti pin submitted by the user. A sample request adhering to above signature will look like this: { \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\", \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"confirmation_code\": \"206964\", \"transaction_pin\": \"1234\" } A successful request will yield a response that looks something like this: { \"token\": \"VGMyaKVDQQyorBiQ3W99WL\", \"amount\": 10000, \"mobile\": \"98XXXXX099\", \"product_identity\": \"book/id-120\", \"product_name\": \"A Song of Ice and Fire\" }","title":"2. Confirm transaction"},{"location":"checkout/diy-wallet/#3-verify-transaction","text":"The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server. See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction.","title":"3. Verify transaction"},{"location":"checkout/diy-wallet/#notes","text":"Initiate and confirm api requests should be made from the front-end.","title":"Notes"},{"location":"checkout/ios/","text":"iOS SDK \u00b6 This documentation details the process to integrate Khalti payment gateway in your iOS app. Example \u00b6 Swift : Clone project and use 'Example' directory. Do 'pod install'. Objective-C : Clone project and use 'Example Obj-c' directory. Do 'pod install'. Installation guide \u00b6 Khalti is available through CocoaPods . To install it, simply add the following line to your Podfile: pod 'Khalti' Usage \u00b6 Adding CustomSchme \u00b6 Khalti uses custom Scheme: So merhant should setup URLScheme unique for their app. We have made usability as of user case. After adding Url Scheme create global constant for same customUrlScheme as below let khaltiUrlScheme:String = \"KhaltiPayExampleScheme\" Requirements \u00b6 To work around with this redirection you have to implement some openUrl in Appdelegate.swift . Khalti.shared.defaultAction() returns true if you initiate payment through Khalti. Khalti.shared.action(with: url) is needed for complete action after ebanking and card payment. Note: Using Khalti.shared.action(with: url) is mandatory. Add following code to Appdelegate.swift func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool { Khalti.shared.action(with: url) return Khalti.shared.defaultAction() // Or true } Using at particular ViewController \u00b6 At your viewController during action of pay add initiate config file When instantiating Config pass public key, product id, product name, amount (in paisa). Product web url and additional data are optional. let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData) // Data passed here are based on Example project Note: Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti. At this stage the scheme named you declared earlier is passed to Khatli.shared.appUrlScheme Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme // This can be used at appdelegate during didfinishlaunching. // This should be mandatory Finally present the khaltiPay Viewcontroller by calling public funcation Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Params of present function of Khalti param Value caller viewController from where you initate payment. with Config object delegate self Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate. Example as used in Example Project \u00b6 let extra:[String : Any] = [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23] let jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions()) let jsonString = String(data: jsonData!, encoding: .utf8)! let additionalData:Dictionary<String,String> = [ \"merchant_name\" : \"HelloPaaaaisaPVTLtd.\", \"merchant_extra\" : jsonString ] Khalti.shared.appUrlScheme = khaltiUrlScheme let khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false) Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Config file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature. Additionally, Config class also accepts a Dictionary which you can use to pass any additional data. Make sure you add a merchant_ prefix in your map key. Using delegates \u00b6 The viewController you implement pay action should contain KhaltiPayDelegate implementing onCheckOutSuccess(data: Dictionary<String, Any>) onCheckOutError(action: String, message: String) extension YourViewController: KhaltiPayDelegate { func onCheckOutSuccess(data: Dictionary<String, Any>) { print(data) print(\"Oh there is success message received\") } func onCheckOutError(action: String, message: String) { print(action) print(message) print(\"Oh there occure error in payment\") } } Summary \u00b6 Callback Methods \u00b6 Method Description onCheckOutSuccess(data: Dictionary<String, Any>) This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onCheckOutError(action: String, message: String, data:Dictionary<String,Any>?) This method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists. Response Sample \u00b6 Success Messsage \u00b6 Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Int token token String cardPayment false Bool The success message also contains all the key and value provide as extra data while initiating Config . Error Messsage \u00b6 Variable Description Type action initiate/confirm/ebanking String message Detail Error Message String data data of error (Optional) Dictionary ? Support \u00b6 For Queries, feel free to mail us at: merchant@khalti.com Check out the API Documentation .","title":"iOS SDK"},{"location":"checkout/ios/#ios-sdk","text":"This documentation details the process to integrate Khalti payment gateway in your iOS app.","title":"iOS SDK"},{"location":"checkout/ios/#example","text":"Swift : Clone project and use 'Example' directory. Do 'pod install'. Objective-C : Clone project and use 'Example Obj-c' directory. Do 'pod install'.","title":"Example"},{"location":"checkout/ios/#installation-guide","text":"Khalti is available through CocoaPods . To install it, simply add the following line to your Podfile: pod 'Khalti'","title":"Installation guide"},{"location":"checkout/ios/#usage","text":"","title":"Usage"},{"location":"checkout/ios/#adding-customschme","text":"Khalti uses custom Scheme: So merhant should setup URLScheme unique for their app. We have made usability as of user case. After adding Url Scheme create global constant for same customUrlScheme as below let khaltiUrlScheme:String = \"KhaltiPayExampleScheme\"","title":"Adding CustomSchme"},{"location":"checkout/ios/#requirements","text":"To work around with this redirection you have to implement some openUrl in Appdelegate.swift . Khalti.shared.defaultAction() returns true if you initiate payment through Khalti. Khalti.shared.action(with: url) is needed for complete action after ebanking and card payment. Note: Using Khalti.shared.action(with: url) is mandatory. Add following code to Appdelegate.swift func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool { Khalti.shared.action(with: url) return Khalti.shared.defaultAction() // Or true }","title":"Requirements"},{"location":"checkout/ios/#using-at-particular-viewcontroller","text":"At your viewController during action of pay add initiate config file When instantiating Config pass public key, product id, product name, amount (in paisa). Product web url and additional data are optional. let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData) // Data passed here are based on Example project Note: Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti. At this stage the scheme named you declared earlier is passed to Khatli.shared.appUrlScheme Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme // This can be used at appdelegate during didfinishlaunching. // This should be mandatory Finally present the khaltiPay Viewcontroller by calling public funcation Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Params of present function of Khalti param Value caller viewController from where you initate payment. with Config object delegate self Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.","title":"Using at particular ViewController"},{"location":"checkout/ios/#example-as-used-in-example-project","text":"let extra:[String : Any] = [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23] let jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions()) let jsonString = String(data: jsonData!, encoding: .utf8)! let additionalData:Dictionary<String,String> = [ \"merchant_name\" : \"HelloPaaaaisaPVTLtd.\", \"merchant_extra\" : jsonString ] Khalti.shared.appUrlScheme = khaltiUrlScheme let khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false) Khalti.present(caller: self, with: TEST_CONFIG, delegate: self) Config file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature. Additionally, Config class also accepts a Dictionary which you can use to pass any additional data. Make sure you add a merchant_ prefix in your map key.","title":"Example as used in Example Project"},{"location":"checkout/ios/#using-delegates","text":"The viewController you implement pay action should contain KhaltiPayDelegate implementing onCheckOutSuccess(data: Dictionary<String, Any>) onCheckOutError(action: String, message: String) extension YourViewController: KhaltiPayDelegate { func onCheckOutSuccess(data: Dictionary<String, Any>) { print(data) print(\"Oh there is success message received\") } func onCheckOutError(action: String, message: String) { print(action) print(message) print(\"Oh there occure error in payment\") } }","title":"Using delegates"},{"location":"checkout/ios/#summary","text":"","title":"Summary"},{"location":"checkout/ios/#callback-methods","text":"Method Description onCheckOutSuccess(data: Dictionary<String, Any>) This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. onCheckOutError(action: String, message: String, data:Dictionary<String,Any>?) This method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists.","title":"Callback Methods"},{"location":"checkout/ios/#response-sample","text":"","title":"Response Sample"},{"location":"checkout/ios/#success-messsage","text":"Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Int token token String cardPayment false Bool The success message also contains all the key and value provide as extra data while initiating Config .","title":"Success Messsage"},{"location":"checkout/ios/#error-messsage","text":"Variable Description Type action initiate/confirm/ebanking String message Detail Error Message String data data of error (Optional) Dictionary ?","title":"Error Messsage"},{"location":"checkout/ios/#support","text":"For Queries, feel free to mail us at: merchant@khalti.com Check out the API Documentation .","title":"Support"},{"location":"checkout/web/","text":"Web SDK \u00b6 This documentation details the process of Khalti Web/JavaScript SDK integration in your website/app. We also have SDKs for Android and iOS. Demo \u00b6 To get the feel of how Khalti checkout looks click the button below. Pay with Khalti Pay with Ebanking Installation \u00b6 Khalti checkout can be integrated with or without build tools like Webpack and Rollup . Install Without build tools \u00b6 <html> <head> <script src=\"https://khalti.s3.ap-south-1.amazonaws.com/KPG/dist/2020.12.17.0.0.0/khalti-checkout.iffe.js\"></script> </head> <body> ... <!-- Place this where you need payment button --> <button id=\"payment-button\">Pay with Khalti</button> <!-- Place this where you need payment button --> <!-- Paste this code anywhere in you body tag --> <script> var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"paymentPreference\": [ \"KHALTI\", \"EBANKING\", \"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\", ], \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } } }; var checkout = new KhaltiCheckout(config); var btn = document.getElementById(\"payment-button\"); btn.onclick = function () { // minimum transaction amount must be 10, i.e 1000 in paisa. checkout.show({amount: 1000}); } </script> <!-- Paste this code anywhere in you body tag --> ... </body> </html> Click here for details on config parameters. Install with build tools \u00b6 Khalti checkout can be bundled with build tools like Webpack, Rollup, etc. 1. Install khalti-checkout-web \u00b6 Using yarn \u00b6 yarn add khalti-checkout-web Using npm \u00b6 npm install khalti-checkout-web --save 2. Import and use it in your desired component \u00b6 import KhaltiCheckout from \"khalti-checkout-web\"; let config = { // replace this key with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Drogon\", \"productUrl\": \"http://gameofthrones.com/buy/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, // onError handler is optional onError (error) { // handle errors console.log(error); }, onClose () { console.log('widget is closing'); } }, \"paymentPreference\": [\"KHALTI\", \"EBANKING\",\"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\"], }; let checkout = new KhaltiCheckout(config); let btn = document.getElementById(\"payment-button\"); btn.onclick = function () { // minimum transaction amount must be 10, i.e 1000 in paisa. checkout.show({amount: 1000}); } API \u00b6 KhaltiCheckout(configuration?) This creates an instance of the KhaltiCheckOut class. The configuration argument is a JavaScript object. See configuration for details on available configuration parameters. show(configuration?) Displays the Khalti checkout widget. Receives configuration as argument. Provide amount and mobile to prefill the checkout widget field. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. checkout.show({amount: 1000, mobile: 98XXXXXXXX}) mobile is an optional field and expects Khalti Registered Number for wallet payment. hide() Hide the widget. Configuration \u00b6 Configuration is a Javascript object with following attributes. Key Required Type Value publickKey true string Test or live public key which identifies the merchant. amount true integer Amount to pay must be in paisa. Minimum transaction amount is 1000 paisa ie Rs 10 productIdentity true string Unique product identifier at merchant. productName true string Name of product. productUrl true string Url of product. eventHandler true object It is a javascript object with three methods mobile false integer Mobile number of consumer. paymentPreference false array If not provided all the payment options will be rendered. It is javascript array with these options \"KHALTI\", \"EBANKING\", \"MOBILE_BANKING\" \"CONNECT_IPS\", \"SCT\" onSuccess This method is called once a transaction is confirmed by a user. The success response is in the following format: { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"amount\": 1000, \"mobile\": \"98XXXXX969\", \"product_identity\": \"1234567890\", \"product_name\": \"Dragon\", \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"token\": \"QUao9cqFzxPgvWJNi9aKac\" } It receives transaction idx of transaction, token , amount and other (key/)values with payloads. One should implement this method to initiate payment verification at merchant which in turn will make verification request at Khalti. Now you should send these values to your server and call khalti server to verify the transaction . For documentation on verification follow this link . onError (optional) This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for Invalid Khalti PIN or Confirmation Code : The error response during initiation will be something like this: { \"detail\":\"Mobile or pin invalid.\", \"tries_remaining\":\"2\", \"error_key\":\"validation_error\" } The error response during confirmation will be somethig like this: { \"action\": \"WALLET_PAYMENT_CONFIRM\", \"message\": undefined, \"payload\": { \"detail\": \"Confirmation code or transaction pin does not match.\" }, \"status_code\": 400 } onClose (optional) This method is also optional. If implemented, this method is called when close icon(X) of the widget is called. Additionally Configuration also accepts attribute starting with merchant_ that can be used to pass additional (meta) data. merchant_name : This is merchant name merchant_extra : This is extra data The additional data starting with merchant_ is returned in success response payload. Check out the source for Khalti checkout on Github . Now, for server side integration check Verification and Transaction api. var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } }, paymentPreference: [\"KHALTI\", \"EBANKING\",\"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\"], }; var ebanking_config = { \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } }, paymentPreference: [\"EBANKING\"], } var checkout = new KhaltiCheckout(config); var eBankingCheckout = new KhaltiCheckout(ebanking_config); var btn = document.getElementById(\"payment-button\"); var btn2 = document.getElementById('ebanking-button'); btn.onclick = function () { checkout.show({amount: 1000}); } btn2.onclick = function () { eBankingCheckout.show({amount: 1000}); }","title":"Web SDK"},{"location":"checkout/web/#web-sdk","text":"This documentation details the process of Khalti Web/JavaScript SDK integration in your website/app. We also have SDKs for Android and iOS.","title":"Web SDK"},{"location":"checkout/web/#demo","text":"To get the feel of how Khalti checkout looks click the button below. Pay with Khalti Pay with Ebanking","title":"Demo"},{"location":"checkout/web/#installation","text":"Khalti checkout can be integrated with or without build tools like Webpack and Rollup .","title":"Installation"},{"location":"checkout/web/#install-without-build-tools","text":"<html> <head> <script src=\"https://khalti.s3.ap-south-1.amazonaws.com/KPG/dist/2020.12.17.0.0.0/khalti-checkout.iffe.js\"></script> </head> <body> ... <!-- Place this where you need payment button --> <button id=\"payment-button\">Pay with Khalti</button> <!-- Place this where you need payment button --> <!-- Paste this code anywhere in you body tag --> <script> var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"paymentPreference\": [ \"KHALTI\", \"EBANKING\", \"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\", ], \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } } }; var checkout = new KhaltiCheckout(config); var btn = document.getElementById(\"payment-button\"); btn.onclick = function () { // minimum transaction amount must be 10, i.e 1000 in paisa. checkout.show({amount: 1000}); } </script> <!-- Paste this code anywhere in you body tag --> ... </body> </html> Click here for details on config parameters.","title":"Install Without build tools"},{"location":"checkout/web/#install-with-build-tools","text":"Khalti checkout can be bundled with build tools like Webpack, Rollup, etc.","title":"Install with build tools"},{"location":"checkout/web/#1-install-khalti-checkout-web","text":"","title":"1. Install khalti-checkout-web"},{"location":"checkout/web/#using-yarn","text":"yarn add khalti-checkout-web","title":"Using yarn"},{"location":"checkout/web/#using-npm","text":"npm install khalti-checkout-web --save","title":"Using npm"},{"location":"checkout/web/#2-import-and-use-it-in-your-desired-component","text":"import KhaltiCheckout from \"khalti-checkout-web\"; let config = { // replace this key with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\", \"productIdentity\": \"1234567890\", \"productName\": \"Drogon\", \"productUrl\": \"http://gameofthrones.com/buy/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, // onError handler is optional onError (error) { // handle errors console.log(error); }, onClose () { console.log('widget is closing'); } }, \"paymentPreference\": [\"KHALTI\", \"EBANKING\",\"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\"], }; let checkout = new KhaltiCheckout(config); let btn = document.getElementById(\"payment-button\"); btn.onclick = function () { // minimum transaction amount must be 10, i.e 1000 in paisa. checkout.show({amount: 1000}); }","title":"2. Import and use it in your desired component"},{"location":"checkout/web/#api","text":"KhaltiCheckout(configuration?) This creates an instance of the KhaltiCheckOut class. The configuration argument is a JavaScript object. See configuration for details on available configuration parameters. show(configuration?) Displays the Khalti checkout widget. Receives configuration as argument. Provide amount and mobile to prefill the checkout widget field. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. checkout.show({amount: 1000, mobile: 98XXXXXXXX}) mobile is an optional field and expects Khalti Registered Number for wallet payment. hide() Hide the widget.","title":"API"},{"location":"checkout/web/#configuration","text":"Configuration is a Javascript object with following attributes. Key Required Type Value publickKey true string Test or live public key which identifies the merchant. amount true integer Amount to pay must be in paisa. Minimum transaction amount is 1000 paisa ie Rs 10 productIdentity true string Unique product identifier at merchant. productName true string Name of product. productUrl true string Url of product. eventHandler true object It is a javascript object with three methods mobile false integer Mobile number of consumer. paymentPreference false array If not provided all the payment options will be rendered. It is javascript array with these options \"KHALTI\", \"EBANKING\", \"MOBILE_BANKING\" \"CONNECT_IPS\", \"SCT\" onSuccess This method is called once a transaction is confirmed by a user. The success response is in the following format: { \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\", \"amount\": 1000, \"mobile\": \"98XXXXX969\", \"product_identity\": \"1234567890\", \"product_name\": \"Dragon\", \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"token\": \"QUao9cqFzxPgvWJNi9aKac\" } It receives transaction idx of transaction, token , amount and other (key/)values with payloads. One should implement this method to initiate payment verification at merchant which in turn will make verification request at Khalti. Now you should send these values to your server and call khalti server to verify the transaction . For documentation on verification follow this link . onError (optional) This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for Invalid Khalti PIN or Confirmation Code : The error response during initiation will be something like this: { \"detail\":\"Mobile or pin invalid.\", \"tries_remaining\":\"2\", \"error_key\":\"validation_error\" } The error response during confirmation will be somethig like this: { \"action\": \"WALLET_PAYMENT_CONFIRM\", \"message\": undefined, \"payload\": { \"detail\": \"Confirmation code or transaction pin does not match.\" }, \"status_code\": 400 } onClose (optional) This method is also optional. If implemented, this method is called when close icon(X) of the widget is called. Additionally Configuration also accepts attribute starting with merchant_ that can be used to pass additional (meta) data. merchant_name : This is merchant name merchant_extra : This is extra data The additional data starting with merchant_ is returned in success response payload. Check out the source for Khalti checkout on Github . Now, for server side integration check Verification and Transaction api. var config = { // replace the publicKey with yours \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } }, paymentPreference: [\"KHALTI\", \"EBANKING\",\"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\"], }; var ebanking_config = { \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\", \"productIdentity\": \"1234567890\", \"productName\": \"Dragon\", \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\", \"eventHandler\": { onSuccess (payload) { // hit merchant api for initiating verfication console.log(payload); }, onError (error) { console.log(error); }, onClose () { console.log('widget is closing'); } }, paymentPreference: [\"EBANKING\"], } var checkout = new KhaltiCheckout(config); var eBankingCheckout = new KhaltiCheckout(ebanking_config); var btn = document.getElementById(\"payment-button\"); var btn2 = document.getElementById('ebanking-button'); btn.onclick = function () { checkout.show({amount: 1000}); } btn2.onclick = function () { eBankingCheckout.show({amount: 1000}); }","title":"Configuration"},{"location":"checkout/flutter/khalti-flutter/","text":"Khalti Flutter SDK (with Payment Interface) \u00b6 Khalti Payment Gateway SDK for Flutter with default payment interface, works out of the box without having to add any additional user interface. Khalti Payment Gateway for Flutter Introduction \u00b6 Read the introduction here . Getting Started \u00b6 Integrating Khalti Payment Gateway requires merchant account. You can always create one easily from here . Read the steps to integrate Khalti Payment Gateway in details here . Supported Platforms \u00b6 Payment Method Android iOS Web Desktop (macOS, Linux, Windows) Khalti Wallet \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f E-Banking \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Mobile Banking \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Connect IPS \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c SCT \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Setup \u00b6 Detailed setup for each platform. Android \u00b6 In your app's AndroidManifest.xml , add these lines inside <activity>...</activity> tag: <meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"true\" /> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"khalti\" android:host=\"pay\" /> </intent-filter> iOS \u00b6 In your app's Info.plist , add these properties: <key>FlutterDeepLinkingEnabled</key> <true/> <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleTypeRole</key> <string>Editor</string> <key>CFBundleURLSchemes</key> <array> <string>khalti</string> </array> <key>CFBundleURLName</key> <string>pay</string> </dict> </array> Web \u00b6 No configuration is required for web. Desktop \u00b6 No configuration is required for desktop. Initialization \u00b6 Wrap the topmost widget of your app with KhaltiScope widget. And add supported locales and KhaltiLocalizations.delegate as shown below. Navigator Approach \u00b6 When using MaterialApp or siblings. KhaltiScope( publicKey: <public-key>, child: (context, navigatorKey) { return MaterialApp( navigatorKey: navigatorKey, supportedLocales: const [ Locale('en', 'US'), Locale('ne', 'NP'), ], localizationsDelegates: const [ KhaltiLocalizations.delegate, ... ], ... ); } ); Router Approach \u00b6 When using MaterialApp.router or siblings. final routerDelegate = YourRouterDelegate(); KhaltiScope( publicKey: <public-key>, navigatorKey: routerDelegate.navigatorKey, child: (context, _) { return MaterialApp.router( routerDelegate: routerDelegate, supportedLocales: const [ Locale('en', 'US'), Locale('ne', 'NP'), ], localizationsDelegates: const [ KhaltiLocalizations.delegate, ... ], ... ); } ); Launching Payment Interface \u00b6 Khalti Payment interface can be launched in two ways: Using KhaltiButton \u00b6 The plugin includes easy to use button to launch the payment interface. It can be used as shown below: final config = PaymentConfig( amount: 10000, // Amount should be in paisa productIdentity: 'dell-g5-g5510-2021', productName: 'Dell G5 G5510 2021', productUrl: 'https://www.khalti.com/#/bazaar', additionalData: { // Not mandatory; can be used for reporting purpose 'vendor': 'Khalti Bazaar', }, ) KhaltiButton( config: config, preferences: [ // Not providing this will enable all the payment methods. PaymentPreference.khalti, PaymentPreference.eBanking, ], onSuccess: (successModel) { // Perform Server Verification }, onFailure: (failureModel) { // What to do on failure? }, onCancel: () { // User manually cancelled the transaction }, ), If you want to use only specific payment method then the following dedicated buttons can be used instead: - KhaltiButton.wallet(...) - KhaltiButton.eBanking(...) - KhaltiButton.mBanking(...) - KhaltiButton.connectIPS(...) - KhaltiButton.sct(...) Manual Method \u00b6 Another method to launch the payment interface is using KhaltiScope.pay() method: Inkwell( onTap: () { KhaltiScope.of(context).pay( config: config, preferences: [ PaymentPreference.connectIPS, PaymentPreference.eBanking, PaymentPreference.sct, ], onSuccess: onSuccess, onFailure: onFailure, onCancel: onCancel, ); }, child: Text('Launch Payment Interface'), ); Customizing Return URL \u00b6 Their might be a need to use custom returnUrl , specially in Web platform. Passing a custom return url will result in data url, in following format after successful payment. <returnUrl>/?<data> e.g. Let's say you set a returnUrl = 'https://example.com/test'; . Then the data url will be https://example.com/test/?key=value . A custom return url can be set in PaymentConfig : final config = PaymentConfig( returnUrl: 'https://example.com/test', ... ); Customizing UI \u00b6 This package doesn't support high level of customization as this is more of a plug & play package. If a custom interface is required then khalti package can be used. Example \u00b6 Find more detailed example here . Server Verification \u00b6 After success from the client side payment, the next step is to perform server verification. A server verification is required since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server. Know how to perform server verification here . Contributing \u00b6 Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue. Internationalization \u00b6 Steps to add support for new language 1. Create a new file for the language khalti_localizations_<language-code>.dart inside localization directory. Let's say you want to add support for Nepali language, then the file should be khalti_localizations_ne.dart . Copy contents of khalti_localizations_en.dart to the newly created file and rename the class accordingly. Replace all the strings with the localized strings inside the file. Add entry to _localizations map inside khalti_localizations.dart . dart const Map<String, KhaltiLocalizations> _localizations = { 'en': _KhaltiLocalizationsEn(), 'ne': _KhaltiLocalizationsNe(), // Newly added entry }; Submit a Pull Request with the changes. But ensure that the code changes are well formatted. Format the generated code if needed: flutter format . Support \u00b6 For Queries, feel free to call us at: Contact Our Merchant Team * Mobile (Viber / Whatsapp): 9801165567, 9801165538 * Email: merchant@khalti.com (To integrate Khalti to your business and other online platforms.) Contact Our Merchant Support * Mobile (Viber / Whatsapp): 9801165565, 9801856383, 9801856451 * Email: merchantcare@khalti.com Contact Our Technical Team * Mobile (Viber / Whatsapp): 9843007232 * Email / Skype: sashant@khalti.com (For payment gateway integration support.) License \u00b6 Copyright (c) 2021 The Khalti Authors. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Sparrow Pay Pvt. Ltd. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"khalti_flutter"},{"location":"checkout/flutter/khalti-flutter/#khalti-flutter-sdk-with-payment-interface","text":"Khalti Payment Gateway SDK for Flutter with default payment interface, works out of the box without having to add any additional user interface. Khalti Payment Gateway for Flutter","title":"Khalti Flutter SDK (with Payment Interface)"},{"location":"checkout/flutter/khalti-flutter/#introduction","text":"Read the introduction here .","title":"Introduction"},{"location":"checkout/flutter/khalti-flutter/#getting-started","text":"Integrating Khalti Payment Gateway requires merchant account. You can always create one easily from here . Read the steps to integrate Khalti Payment Gateway in details here .","title":"Getting Started"},{"location":"checkout/flutter/khalti-flutter/#supported-platforms","text":"Payment Method Android iOS Web Desktop (macOS, Linux, Windows) Khalti Wallet \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f E-Banking \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Mobile Banking \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Connect IPS \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c SCT \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c","title":"Supported Platforms"},{"location":"checkout/flutter/khalti-flutter/#setup","text":"Detailed setup for each platform.","title":"Setup"},{"location":"checkout/flutter/khalti-flutter/#android","text":"In your app's AndroidManifest.xml , add these lines inside <activity>...</activity> tag: <meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"true\" /> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"khalti\" android:host=\"pay\" /> </intent-filter>","title":"Android"},{"location":"checkout/flutter/khalti-flutter/#ios","text":"In your app's Info.plist , add these properties: <key>FlutterDeepLinkingEnabled</key> <true/> <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleTypeRole</key> <string>Editor</string> <key>CFBundleURLSchemes</key> <array> <string>khalti</string> </array> <key>CFBundleURLName</key> <string>pay</string> </dict> </array>","title":"iOS"},{"location":"checkout/flutter/khalti-flutter/#web","text":"No configuration is required for web.","title":"Web"},{"location":"checkout/flutter/khalti-flutter/#desktop","text":"No configuration is required for desktop.","title":"Desktop"},{"location":"checkout/flutter/khalti-flutter/#initialization","text":"Wrap the topmost widget of your app with KhaltiScope widget. And add supported locales and KhaltiLocalizations.delegate as shown below.","title":"Initialization"},{"location":"checkout/flutter/khalti-flutter/#navigator-approach","text":"When using MaterialApp or siblings. KhaltiScope( publicKey: <public-key>, child: (context, navigatorKey) { return MaterialApp( navigatorKey: navigatorKey, supportedLocales: const [ Locale('en', 'US'), Locale('ne', 'NP'), ], localizationsDelegates: const [ KhaltiLocalizations.delegate, ... ], ... ); } );","title":"Navigator Approach"},{"location":"checkout/flutter/khalti-flutter/#router-approach","text":"When using MaterialApp.router or siblings. final routerDelegate = YourRouterDelegate(); KhaltiScope( publicKey: <public-key>, navigatorKey: routerDelegate.navigatorKey, child: (context, _) { return MaterialApp.router( routerDelegate: routerDelegate, supportedLocales: const [ Locale('en', 'US'), Locale('ne', 'NP'), ], localizationsDelegates: const [ KhaltiLocalizations.delegate, ... ], ... ); } );","title":"Router Approach"},{"location":"checkout/flutter/khalti-flutter/#launching-payment-interface","text":"Khalti Payment interface can be launched in two ways:","title":"Launching Payment Interface"},{"location":"checkout/flutter/khalti-flutter/#using-khaltibutton","text":"The plugin includes easy to use button to launch the payment interface. It can be used as shown below: final config = PaymentConfig( amount: 10000, // Amount should be in paisa productIdentity: 'dell-g5-g5510-2021', productName: 'Dell G5 G5510 2021', productUrl: 'https://www.khalti.com/#/bazaar', additionalData: { // Not mandatory; can be used for reporting purpose 'vendor': 'Khalti Bazaar', }, ) KhaltiButton( config: config, preferences: [ // Not providing this will enable all the payment methods. PaymentPreference.khalti, PaymentPreference.eBanking, ], onSuccess: (successModel) { // Perform Server Verification }, onFailure: (failureModel) { // What to do on failure? }, onCancel: () { // User manually cancelled the transaction }, ), If you want to use only specific payment method then the following dedicated buttons can be used instead: - KhaltiButton.wallet(...) - KhaltiButton.eBanking(...) - KhaltiButton.mBanking(...) - KhaltiButton.connectIPS(...) - KhaltiButton.sct(...)","title":"Using KhaltiButton"},{"location":"checkout/flutter/khalti-flutter/#manual-method","text":"Another method to launch the payment interface is using KhaltiScope.pay() method: Inkwell( onTap: () { KhaltiScope.of(context).pay( config: config, preferences: [ PaymentPreference.connectIPS, PaymentPreference.eBanking, PaymentPreference.sct, ], onSuccess: onSuccess, onFailure: onFailure, onCancel: onCancel, ); }, child: Text('Launch Payment Interface'), );","title":"Manual Method"},{"location":"checkout/flutter/khalti-flutter/#customizing-return-url","text":"Their might be a need to use custom returnUrl , specially in Web platform. Passing a custom return url will result in data url, in following format after successful payment. <returnUrl>/?<data> e.g. Let's say you set a returnUrl = 'https://example.com/test'; . Then the data url will be https://example.com/test/?key=value . A custom return url can be set in PaymentConfig : final config = PaymentConfig( returnUrl: 'https://example.com/test', ... );","title":"Customizing Return URL"},{"location":"checkout/flutter/khalti-flutter/#customizing-ui","text":"This package doesn't support high level of customization as this is more of a plug & play package. If a custom interface is required then khalti package can be used.","title":"Customizing UI"},{"location":"checkout/flutter/khalti-flutter/#example","text":"Find more detailed example here .","title":"Example"},{"location":"checkout/flutter/khalti-flutter/#server-verification","text":"After success from the client side payment, the next step is to perform server verification. A server verification is required since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server. Know how to perform server verification here .","title":"Server Verification"},{"location":"checkout/flutter/khalti-flutter/#contributing","text":"Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue.","title":"Contributing"},{"location":"checkout/flutter/khalti-flutter/#internationalization","text":"Steps to add support for new language 1. Create a new file for the language khalti_localizations_<language-code>.dart inside localization directory. Let's say you want to add support for Nepali language, then the file should be khalti_localizations_ne.dart . Copy contents of khalti_localizations_en.dart to the newly created file and rename the class accordingly. Replace all the strings with the localized strings inside the file. Add entry to _localizations map inside khalti_localizations.dart . dart const Map<String, KhaltiLocalizations> _localizations = { 'en': _KhaltiLocalizationsEn(), 'ne': _KhaltiLocalizationsNe(), // Newly added entry }; Submit a Pull Request with the changes. But ensure that the code changes are well formatted. Format the generated code if needed: flutter format .","title":"Internationalization"},{"location":"checkout/flutter/khalti-flutter/#support","text":"For Queries, feel free to call us at: Contact Our Merchant Team * Mobile (Viber / Whatsapp): 9801165567, 9801165538 * Email: merchant@khalti.com (To integrate Khalti to your business and other online platforms.) Contact Our Merchant Support * Mobile (Viber / Whatsapp): 9801165565, 9801856383, 9801856451 * Email: merchantcare@khalti.com Contact Our Technical Team * Mobile (Viber / Whatsapp): 9843007232 * Email / Skype: sashant@khalti.com (For payment gateway integration support.)","title":"Support"},{"location":"checkout/flutter/khalti-flutter/#license","text":"Copyright (c) 2021 The Khalti Authors. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Sparrow Pay Pvt. Ltd. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"checkout/flutter/khalti/","text":"Khalti Flutter SDK (without Payment Interface) \u00b6 Khalti Payment Gateway SDK for Flutter without payment interface, a custom user interface is required. Khalti Payment Gateway Want easier integration? \u00b6 This package only provides set of methods for client integration of Khalti Payment Gateway. If custom UI is not required then prefer using khalti_flutter instead. Setup \u00b6 Set up public key \u00b6 The first step is to grab public key from merchant dashboard. Read the getting started to learn about the integration process and grabbing public key. KhaltiService.publicKey = <your-public-key-here>; Note: During integration, use test keys instead of live one. Initiating payment using Wallet \u00b6 final service = KhaltiService(client: KhaltiHttpClient()); final initiationModel = await service.initiatePayment( request: PaymentInitiationRequestModel( amount: 1000, // in paisa mobile: <khalti-mobile-number>, productIdentity: 'mac-mini', productName: 'Apple Mac Mini', transactionPin: <khalti-mpin>, productUrl: 'https://khalti.com/bazaar/mac-mini-16-512-m1', additionalData: { 'vendor': 'Oliz Store', 'manufacturer': 'Apple Inc.', }, ), ); After successful call to the method, an OTP is sent to the mobile number provided. Confirming Transaction \u00b6 final confirmationModel = await service.confirmPayment( request: PaymentConfirmationRequestModel( confirmationCode: <otp-code>, // the OTP code received through previous step token: initiationModel.token, transactionPin: <khalti-mpin>, ), ); Building URL for bank payment \u00b6 final bankPaymentUrl = service.buildBankUrl( bankId: '1234567890', amount: 1000, mobile: mobile, productIdentity: 'macbook-pro-21', productName: 'Macbook Pro 2021', paymentType: BankPaymentType.eBanking, ); The URL obtained can be launched using url_launcher and the Khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response. Fetching available banks for receiving payment \u00b6 final banks = await service.getBanks(paymentType: BankPaymentType.eBanking); License \u00b6 Copyright (c) 2021 The Khalti Authors. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Sparrow Pay Pvt. Ltd. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"khalti"},{"location":"checkout/flutter/khalti/#khalti-flutter-sdk-without-payment-interface","text":"Khalti Payment Gateway SDK for Flutter without payment interface, a custom user interface is required. Khalti Payment Gateway","title":"Khalti Flutter SDK (without Payment Interface)"},{"location":"checkout/flutter/khalti/#want-easier-integration","text":"This package only provides set of methods for client integration of Khalti Payment Gateway. If custom UI is not required then prefer using khalti_flutter instead.","title":"Want easier integration?"},{"location":"checkout/flutter/khalti/#setup","text":"","title":"Setup"},{"location":"checkout/flutter/khalti/#set-up-public-key","text":"The first step is to grab public key from merchant dashboard. Read the getting started to learn about the integration process and grabbing public key. KhaltiService.publicKey = <your-public-key-here>; Note: During integration, use test keys instead of live one.","title":"Set up public key"},{"location":"checkout/flutter/khalti/#initiating-payment-using-wallet","text":"final service = KhaltiService(client: KhaltiHttpClient()); final initiationModel = await service.initiatePayment( request: PaymentInitiationRequestModel( amount: 1000, // in paisa mobile: <khalti-mobile-number>, productIdentity: 'mac-mini', productName: 'Apple Mac Mini', transactionPin: <khalti-mpin>, productUrl: 'https://khalti.com/bazaar/mac-mini-16-512-m1', additionalData: { 'vendor': 'Oliz Store', 'manufacturer': 'Apple Inc.', }, ), ); After successful call to the method, an OTP is sent to the mobile number provided.","title":"Initiating payment using Wallet"},{"location":"checkout/flutter/khalti/#confirming-transaction","text":"final confirmationModel = await service.confirmPayment( request: PaymentConfirmationRequestModel( confirmationCode: <otp-code>, // the OTP code received through previous step token: initiationModel.token, transactionPin: <khalti-mpin>, ), );","title":"Confirming Transaction"},{"location":"checkout/flutter/khalti/#building-url-for-bank-payment","text":"final bankPaymentUrl = service.buildBankUrl( bankId: '1234567890', amount: 1000, mobile: mobile, productIdentity: 'macbook-pro-21', productName: 'Macbook Pro 2021', paymentType: BankPaymentType.eBanking, ); The URL obtained can be launched using url_launcher and the Khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response.","title":"Building URL for bank payment"},{"location":"checkout/flutter/khalti/#fetching-available-banks-for-receiving-payment","text":"final banks = await service.getBanks(paymentType: BankPaymentType.eBanking);","title":"Fetching available banks for receiving payment"},{"location":"checkout/flutter/khalti/#license","text":"Copyright (c) 2021 The Khalti Authors. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Sparrow Pay Pvt. Ltd. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"plugins/magneto/","text":"Magneto \u00b6 This is Khalti Payment Gateway plugin for Magneto 2. Check out the source for Khalti plugin on Github . Installation \u00b6 Create the following folder structure inside \"app\" folder and copy all the files \"Fourwallsinn/Khalti\" After you have copied all the files the folder structure should be like this \"app/code/Fourwallsinn/Khalti/UPLOADED_FILES\" Run the following CLI commands to complete the Plugin Installation php bin/magento setup:upgrade If you are on Production Environment, make sure you run the following command as well php bin/magento setup:static-content:deploy","title":"Magento 2"},{"location":"plugins/magneto/#magneto","text":"This is Khalti Payment Gateway plugin for Magneto 2. Check out the source for Khalti plugin on Github .","title":"Magneto"},{"location":"plugins/magneto/#installation","text":"Create the following folder structure inside \"app\" folder and copy all the files \"Fourwallsinn/Khalti\" After you have copied all the files the folder structure should be like this \"app/code/Fourwallsinn/Khalti/UPLOADED_FILES\" Run the following CLI commands to complete the Plugin Installation php bin/magento setup:upgrade If you are on Production Environment, make sure you run the following command as well php bin/magento setup:static-content:deploy","title":"Installation"},{"location":"plugins/opencart/","text":"Opencart \u00b6 This is Khalti Payment Gateway extension for Opencart. Check out the source for Khalti plugin on Github . Installation \u00b6 The basic steps to follow: Go to Extension > Installer in your admin dashboard Upload the zip file of module ( link ) Now after successful upload go to Extensions > Extensions Choose Payment on extension type section you will get a list with Khalti in it. Select to edit button. You will see fields as below. Set Test mode to Yes and Status to Enabled . Enter your test public key and test secret key in respective fields and save. You can get keys from Keys section in your merchant dashboard After successful upload go to Design > Theme Editor in dashboard side nav Select common > header.twig from Choose a template section <script \"https://khalti.com/static/khalti-checkout.js\" type=\"text/javascript\"></script> Add above line in header.twig and save. you may need to manage permission of your project folders if downloaded zip is not compatible try compressing to zip after you uncompressing it Manual Installation \u00b6 Extract the zip file. Copy all files on the root directory of project add script with src \"https://khalti.com/static/khalti-checkout.js\" on your themes header file which is located on \"catalog/view/theme/YOUR_THEME_NAME/common/header.twig clear Opencart cache Testing \u00b6 Before testing set default currency to Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type. Deploy \u00b6 If a test is passed successfully, go to keys section in your merchant dashboard. You will get your Live keys there. Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"Opencart"},{"location":"plugins/opencart/#opencart","text":"This is Khalti Payment Gateway extension for Opencart. Check out the source for Khalti plugin on Github .","title":"Opencart"},{"location":"plugins/opencart/#installation","text":"The basic steps to follow: Go to Extension > Installer in your admin dashboard Upload the zip file of module ( link ) Now after successful upload go to Extensions > Extensions Choose Payment on extension type section you will get a list with Khalti in it. Select to edit button. You will see fields as below. Set Test mode to Yes and Status to Enabled . Enter your test public key and test secret key in respective fields and save. You can get keys from Keys section in your merchant dashboard After successful upload go to Design > Theme Editor in dashboard side nav Select common > header.twig from Choose a template section <script \"https://khalti.com/static/khalti-checkout.js\" type=\"text/javascript\"></script> Add above line in header.twig and save. you may need to manage permission of your project folders if downloaded zip is not compatible try compressing to zip after you uncompressing it","title":"Installation"},{"location":"plugins/opencart/#manual-installation","text":"Extract the zip file. Copy all files on the root directory of project add script with src \"https://khalti.com/static/khalti-checkout.js\" on your themes header file which is located on \"catalog/view/theme/YOUR_THEME_NAME/common/header.twig clear Opencart cache","title":"Manual Installation"},{"location":"plugins/opencart/#testing","text":"Before testing set default currency to Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type.","title":"Testing"},{"location":"plugins/opencart/#deploy","text":"If a test is passed successfully, go to keys section in your merchant dashboard. You will get your Live keys there. Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"Deploy"},{"location":"plugins/prestashop/","text":"Prestashop \u00b6 This is our add-on module for PrestaShop, a open source e-commerce solution. Check out the source for Khalti plugin on Github.","title":"Prestashop"},{"location":"plugins/prestashop/#prestashop","text":"This is our add-on module for PrestaShop, a open source e-commerce solution. Check out the source for Khalti plugin on Github.","title":"Prestashop"},{"location":"plugins/whmcs/","text":"Official Khalti module for WHMCS \u00b6 This is third party gateway modules to integrate Khalti payment solution with the WHMCS platform. Installation \u00b6 Download the ZIP (or tar.gz) file from the releases See the releases Simply extract at the root folder of your WHMCS installation. Following files will be copied File Structure \u00b6 modules / | gateways / | khaltigateway.php | callback / | khaltigateway.php | khaltigateway / | common.php | index.php | init.php | step2.php (Basically, the plugin creates - file khaltigateway.php under modules/gateways directory of your root installation, - directory khaltigateway/ under modules/gateways directory of your root installation - file khaltigateway.php under modules/gateways/callback directory of your root installation. (This file is kept just to maintain the convention that WHMCS suggests) Activate \u00b6 Login to admin area of your WHMCS installation and enable the gateway from Setup -> Payments -> Payment Gateways (Refer to the image below) Configure \u00b6 Once the gateway is enabled, the gateway parameters need to be configured. (Refer to the image below) PS: Please make sure that the currency \"NPR\" is selected for the option \"Convert to For Processing\"","title":"WHMCS Khalti Module"},{"location":"plugins/whmcs/#official-khalti-module-for-whmcs","text":"This is third party gateway modules to integrate Khalti payment solution with the WHMCS platform.","title":"Official Khalti module for WHMCS"},{"location":"plugins/whmcs/#installation","text":"Download the ZIP (or tar.gz) file from the releases See the releases Simply extract at the root folder of your WHMCS installation. Following files will be copied","title":"Installation"},{"location":"plugins/whmcs/#file-structure","text":"modules / | gateways / | khaltigateway.php | callback / | khaltigateway.php | khaltigateway / | common.php | index.php | init.php | step2.php (Basically, the plugin creates - file khaltigateway.php under modules/gateways directory of your root installation, - directory khaltigateway/ under modules/gateways directory of your root installation - file khaltigateway.php under modules/gateways/callback directory of your root installation. (This file is kept just to maintain the convention that WHMCS suggests)","title":"File Structure"},{"location":"plugins/whmcs/#activate","text":"Login to admin area of your WHMCS installation and enable the gateway from Setup -> Payments -> Payment Gateways (Refer to the image below)","title":"Activate"},{"location":"plugins/whmcs/#configure","text":"Once the gateway is enabled, the gateway parameters need to be configured. (Refer to the image below) PS: Please make sure that the currency \"NPR\" is selected for the option \"Convert to For Processing\"","title":"Configure"},{"location":"plugins/woocommerce/","text":"WooCommerce \u00b6 This is Khalti Payment Gateway extension for WooCommerce. Check out the source for Khalti plugin on Github. Installation \u00b6 The basic steps to follow: Go to the plugin section in your WordPress admin dashboard Click on Add New and upload the zip file of Khalti WooCommerce plugin ( link ) and upload it After installation is complete, go to WooCommerce > Settings Go to Payments option where you can find Khalti among other payment gateways Click on Khalti option and enter your test secret key and test public key in respective fields. You can get keys from Keys section in your merchant dashboard Click on save changes Testing \u00b6 Should enable khalti and Test Mode as shown in above example. Currency should be Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type. Deploy \u00b6 If you pass the test, Go to keys section in your merchant account, you can get your Live keys their Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"WooCommerce"},{"location":"plugins/woocommerce/#woocommerce","text":"This is Khalti Payment Gateway extension for WooCommerce. Check out the source for Khalti plugin on Github.","title":"WooCommerce"},{"location":"plugins/woocommerce/#installation","text":"The basic steps to follow: Go to the plugin section in your WordPress admin dashboard Click on Add New and upload the zip file of Khalti WooCommerce plugin ( link ) and upload it After installation is complete, go to WooCommerce > Settings Go to Payments option where you can find Khalti among other payment gateways Click on Khalti option and enter your test secret key and test public key in respective fields. You can get keys from Keys section in your merchant dashboard Click on save changes","title":"Installation"},{"location":"plugins/woocommerce/#testing","text":"Should enable khalti and Test Mode as shown in above example. Currency should be Nepalese Rupee. ( How ) Go to your shop and complete a transaction from Wallet payment type.","title":"Testing"},{"location":"plugins/woocommerce/#deploy","text":"If you pass the test, Go to keys section in your merchant account, you can get your Live keys their Uncheck the Test Mode and enter your public and secret keys in respective fields Finally save the changes.","title":"Deploy"}]}